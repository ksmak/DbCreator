{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/i18next.server.ts", "../app/i18n.ts", "../app/root.tsx", "../app/routes/dashboard.search_data.$formId.tsx", "../app/components/api/instance.ts", "../app/components/api/users.ts", "../app/components/api/db.ts", "../app/components/api/doc.ts", "../app/components/api/index.ts", "../app/components/UI/elements/error_message.tsx", "../app/components/UI/widgets/search_data/dlg_condition.tsx", "../app/components/UI/elements/custom_button.tsx", "../app/components/UI/elements/custom_input.tsx", "../app/components/UI/widgets/search_data/buttons/btn_search.tsx", "../app/components/UI/widgets/search_data/buttons/buttons.tsx", "../app/components/UI/elements/panel.tsx", "../app/components/UI/widgets/search_data/list_fields.tsx", "../app/components/UI/widgets/search_data/view.tsx", "../app/components/UI/widgets/search_data/cond_buttons.tsx", "../app/components/UI/widgets/search_data/list_conditions.tsx", "../app/routes/dashboard.enter_data.$formId.tsx", "../app/components/UI/widgets/enter_data/view.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_cancel.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_create.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_delete.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_edit.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_find.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_save.tsx", "../app/components/UI/widgets/enter_data/buttons/btn_search.tsx", "../app/components/UI/widgets/enter_data/buttons/buttons.tsx", "../app/components/UI/widgets/enter_data/dlg_find_result.tsx", "../app/components/UI/widgets/enter_data/rec_navigator.tsx", "../app/components/UI/widgets/enter_data/edit_form/edit_form.tsx", "../app/components/UI/elements/custom_select.tsx", "../app/components/UI/widgets/enter_data/edit_form/field.tsx", "../app/components/UI/widgets/enter_data/edit_form/single_group.tsx", "../app/components/UI/widgets/enter_data/edit_form/multy_group.tsx", "../app/components/UI/widgets/enter_data/dlg_multy_group.tsx", "../app/routes/dashboard.dictionaries.tsx", "../app/components/UI/widgets/dictionaries/buttons/btn_add_value.tsx", "../app/components/UI/widgets/dictionaries/buttons/buttons.tsx", "../app/components/UI/widgets/dictionaries/tbl_dictionaries.tsx", "../app/components/UI/widgets/dictionaries/tbl_dic_values.tsx", "../app/components/UI/widgets/dictionaries/buttons/btn_delete_value.tsx", "../app/components/UI/widgets/dictionaries/view.tsx", "../app/routes/dashboard.db_struct.tsx", "../app/components/UI/widgets/db_struct/buttons/btn_add_dictionary.tsx", "../app/components/UI/widgets/db_struct/buttons/btn_add_inputform.tsx", "../app/components/UI/widgets/db_struct/buttons/btn_add_searchform.tsx", "../app/components/UI/widgets/db_struct/buttons/btn_restruct_db.tsx", "../app/components/UI/widgets/db_struct/buttons/buttons.tsx", "../app/components/UI/widgets/db_struct/navigator.tsx", "../app/components/UI/widgets/db_struct/forms/form_dict.tsx", "../app/components/UI/widgets/db_struct/forms/form_group.tsx", "../app/components/UI/widgets/db_struct/forms/form_input.tsx", "../app/components/UI/widgets/db_struct/forms/form_search.tsx", "../app/components/UI/widgets/db_struct/forms/forms.tsx", "../app/components/UI/widgets/db_struct/view.tsx", "../app/routes/dashboard.users.tsx", "../app/components/UI/widgets/users/dlg_user.tsx", "../app/components/UI/widgets/users/btn_new_user.tsx", "../app/components/UI/widgets/users/tbl_users.tsx", "../app/components/UI/widgets/users/btn_delete_user.tsx", "../app/components/UI/widgets/users/btn_edit_user.tsx", "../app/components/UI/widgets/users/view.tsx", "../app/components/UI/widgets/users/tbl_roles.tsx", "../app/components/UI/widgets/users/btn_delete_role.tsx", "../app/components/UI/widgets/users/tbl_ainputforms.tsx", "../app/components/UI/widgets/users/btn_delete_ainputform.tsx", "../app/components/UI/widgets/users/btn_add_ainputform.tsx", "../app/components/UI/widgets/users/btn_add_role.tsx", "../app/components/UI/widgets/users/btn_add_asearchform.tsx", "../app/components/UI/widgets/users/tbl_asearchforms.tsx", "../app/components/UI/widgets/users/btn_delete_asearchform.tsx", "../app/components/UI/widgets/users/tbl_users_only_login.tsx", "../app/components/UI/widgets/users/tbl_roles_only_title.tsx", "../app/components/UI/widgets/users/btn_delete_userrole.tsx", "../app/components/UI/widgets/users/btn_add_userrole.tsx", "../app/routes/dashboard.tsx", "../app/components/UI/widgets/dashboard/view.tsx", "../app/components/UI/widgets/dashboard/menu/main_menu.tsx", "../app/components/UI/elements/logo.tsx", "../app/components/UI/widgets/dashboard/menu/nav_list.tsx", "../app/components/UI/widgets/dashboard/menu/nav_list_menu.tsx", "../app/components/UI/elements/language.tsx", "../app/routes/_index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import { PassThrough } from \"stream\";\nimport {\n  createReadableStreamFromReadable,\n  type EntryContext,\n} from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport { createInstance } from \"i18next\";\nimport i18next from \"./i18next.server\";\nimport { I18nextProvider, initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-fs-backend\";\nimport i18n from \"./i18n\"; // your i18n configuration file\nimport { resolve } from \"node:path\";\n\nconst ABORT_DELAY = 5000;\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  let callbackName = isbot(request.headers.get(\"user-agent\"))\n    ? \"onAllReady\"\n    : \"onShellReady\";\n\n  let instance = createInstance();\n  let lng = await i18next.getLocale(request);\n  let ns = i18next.getRouteNamespaces(remixContext);\n\n  await instance\n    .use(initReactI18next) // Tell our instance to use react-i18next\n    .use(Backend) // Setup our backend\n    .init({\n      ...i18n, // spread the configuration\n      lng, // The locale we detected above\n      ns, // The namespaces the routes about to render wants to use\n      backend: { loadPath: resolve(\"./public/locales/{{lng}}/{{ns}}.json\") },\n    });\n\n  return new Promise((resolve, reject) => {\n    let didError = false;\n\n    let { pipe, abort } = renderToPipeableStream(\n      <I18nextProvider i18n={instance}>\n        <RemixServer context={remixContext} url={request.url} />\n      </I18nextProvider>,\n      {\n        [callbackName]: () => {\n          let body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            }),\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n\n          console.error(error);\n        },\n      },\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}", "import Backend from \"i18next-fs-backend\";\nimport { resolve } from \"node:path\";\nimport { RemixI18Next } from \"remix-i18next/server\";\nimport i18n from \"~/i18n\"; // your i18n configuration file\n\nlet i18next = new RemixI18Next({\n    detection: {\n        supportedLanguages: i18n.supportedLngs,\n        fallbackLanguage: i18n.fallbackLng,\n    },\n    // This is the configuration for i18next used\n    // when translating messages server-side only\n    i18next: {\n        ...i18n,\n        backend: {\n            loadPath: resolve(\"./public/locales/{{lng}}/{{ns}}.json\"),\n        },\n    },\n    // The i18next plugins you want RemixI18next to use for `i18n.getFixedT` inside loaders and actions.\n    // E.g. The Backend plugin for loading translations from the file system\n    // Tip: You could pass `resources` to the `i18next` configuration and avoid a backend here\n    plugins: [Backend],\n});\n\nexport default i18next;", "export default {\n    // This is the list of languages your application supports\n    supportedLngs: [\"ru\", \"kk\"],\n    // This is the language you want to use in case\n    // if the user language is not in the supportedLngs\n    fallbackLng: \"ru\",\n    // The default namespace of i18next is \"translation\", but you can customize it here\n    defaultNS: \"common\",\n};", "import type { LinksFunction, LoaderFunctionArgs } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  json,\n  useLoaderData } from\n\"@remix-run/react\";\nimport { useChangeLanguage } from \"remix-i18next/react\";\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"~/i18next.server\";\n\nimport stylesheet from \"~/tailwind.css\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: stylesheet }];\n\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  let locale = await i18next.getLocale(request);\n  return json({ locale });\n}\n\nexport let handle = {\n  // In the handle export, we can add a i18n key with namespaces our route\n  // will need to load. This key can be a single string or an array of strings.\n  // TIP: In most cases, you should set this to your defaultNS from your i18n config\n  // or if you did not set one, set it to the i18next default namespace \"translation\"\n  i18n: \"common\"\n};\n\nexport default function App() {\n  // Get the locale from the loader\n  let { locale } = useLoaderData<typeof loader>();\n\n  let { i18n } = useTranslation();\n\n  // This hook will change the i18n instance language to the current locale\n  // detected by the loader, this way, when we do something to change the\n  // language, this locale will change and i18next will load the correct\n  // translation files\n  useChangeLanguage(locale);\n\n  return (\n    <html lang={locale} dir={i18n.dir()}>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"bg-blue-gray-50\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}", "import { InputField, Prisma, SearchField } from \"@prisma/client\";\nimport { ActionFunctionArgs, LoaderFunctionArgs, json } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useOutletContext } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport api from \"~/components/api\";\nimport { ContexType, ICondition } from \"~/types/types\";\nimport SearchDataView from \"~/components/UI/widgets/search_data/view\";\n\nexport async function loader({\n    request,\n    params,\n}: LoaderFunctionArgs) {\n    const url = new URL(request.url)\n    const state = url.searchParams.get(\"state\")\n    let searchForm: any | undefined\n    searchForm = await api.db.getSearchForm(Number(params.formId))\n    return json({ searchForm, state })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let ok: boolean = false\n    let errors: string = ''\n    let docs: { formId?: number, ids?: number[] } | null = null\n    const formData = await request.formData()\n    const {\n        _action,\n        _user,\n        _inputFormId,\n        ...values\n    } = Object.fromEntries(formData)\n    try {\n        let jsonData = JSON.parse(String(values.json))\n        const results: { id: number }[] | [] = await api.doc.searchDoc(jsonData)\n        docs = {\n            formId: Number(_inputFormId),\n            ids: results.map((item: any) => item.id)\n        }\n        ok = true\n    } catch (e) {\n        if (e instanceof Prisma.PrismaClientKnownRequestError) {\n            errors = e.message\n        } else {\n            throw e\n        }\n    }\n    return json({ errors })\n}\n\nexport default function SearchData() {\n    const { conditions, setConditions } = useOutletContext<ContexType>()\n    const { searchForm, state } = useLoaderData<typeof loader>()\n    const data = useActionData<typeof action>()\n    const [showCondition, setShowCondition] = useState(false)\n    const [cond, setCond] = useState<ICondition>({})\n    const [condIndex, setCondIndex] = useState<number | null>(null)\n    const [fld, setFld] = useState<SearchField & { field: InputField } | null>(null)\n    const userId = 19;\n\n    return (\n        <SearchDataView\n            errors={data?.errors}\n            condIndex={condIndex}\n            setCondIndex={setCondIndex}\n            cond={cond}\n            setCond={setCond}\n            show={showCondition}\n            setShow={setShowCondition}\n            conditions={conditions}\n            setConditions={setConditions}\n            userId={userId}\n            inputFormId={searchForm ? searchForm.inputFormId : null}\n            searchForm={searchForm}\n            fld={fld}\n            setFld={setFld}\n        />\n    )\n}", "import { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default prisma", "import { Role, User, AccessInputForm, AccessSearchForm, UserRole } from \"@prisma/client\"\nimport { PrismaClient } from \"@prisma/client/extension\"\nimport bcrypt from 'bcryptjs'\n\nexport default function UsersModule(prisma: PrismaClient) {\n    return {\n        getDepartments() {\n            return prisma.department.findMany()\n        },\n        getUsers(q: string | null = null) {\n            if (!q) {\n                return prisma.user.findMany({\n                    include: {\n                        roles: true\n                    },\n                    orderBy: {\n                        login: 'asc',\n                    }\n                })\n            } else {\n                return prisma.user.findMany({\n                    include: {\n                        roles: true\n                    },\n                    where: {\n                        login: {\n                            startsWith: q\n                        }\n                    },\n                    orderBy: {\n                        login: 'asc',\n                    }\n                })\n            }\n        },\n        createUser(user: User) {\n            return prisma.user.create({\n                data: {\n                    ...user,\n                    id: undefined,\n                    password: bcrypt.hashSync(user.password),\n                    createdAt: undefined,\n                    updatedAt: undefined\n                }\n            })\n        },\n        updateUser(userId: number, user: User) {\n            if (!user.password) {\n                return prisma.user.update({\n                    where: {\n                        id: userId\n                    },\n                    data: {\n                        ...user,\n                        id: undefined,\n                        password: bcrypt.hashSync(user.password),\n                        createdAt: undefined,\n                        updatedAt: undefined\n                    }\n                })\n            } else {\n                return prisma.user.update({\n                    where: {\n                        id: userId\n                    },\n                    data: {\n                        ...user,\n                        id: undefined,\n                        password: undefined,\n                        createdAt: undefined,\n                        updatedAt: undefined\n                    }\n                })\n            }\n        },\n        getUser(userId: number) {\n            return prisma.user.findFirst({\n                where: {\n                    id: userId\n                }\n            })\n        },\n        deleteUser(userId: number) {\n            return prisma.user.delete({\n                where: {\n                    id: userId\n                }\n            })\n        },\n        getRoles() {\n            return prisma.role.findMany()\n        },\n        createEmptyRole(cnt: number) {\n            return prisma.role.create({\n                data: {\n                    title_kk: `Role ${cnt}`,\n                    title_ru: `Role ${cnt}`\n                }\n            })\n        },\n        updateRole(roleId: number, role: Role) {\n            return prisma.role.update({\n                where: {\n                    id: roleId\n                },\n                data: {\n                    ...role,\n                    id: undefined\n                }\n            })\n        },\n        getRole(roleId: number) {\n            return prisma.role.findFirst({\n                where: {\n                    id: roleId\n                }\n            })\n        },\n        deleteRole(roleId: number) {\n            return prisma.role.delete({\n                where: {\n                    id: roleId\n                }\n            })\n        },\n        getAccessInputForms(roleId: number) {\n            return prisma.accessInputForm.findMany({\n                include: {\n                    form: true,\n                },\n                where: {\n                    roleId: roleId\n                },\n            })\n        },\n        createEmptyAccessInputForm(roleId: number) {\n            return prisma.accessInputForm.create({\n                data: {\n                    roleId: roleId\n                }\n            })\n        },\n        updateAccessInputForm(aformId: number, aform: AccessInputForm) {\n            return prisma.accessInputForm.update({\n                where: {\n                    id: aformId\n                },\n                data: {\n                    ...aform,\n                    id: undefined\n                }\n            })\n        },\n        getAccessInputForm(aformId: number) {\n            return prisma.accessInputForm.findFirst({\n                where: {\n                    id: aformId\n                }\n            })\n        },\n        deleteAccessInputForm(aformId: number) {\n            return prisma.accessInputForm.delete({\n                where: {\n                    id: aformId\n                }\n            })\n        },\n        getAccessSearchForms(roleId: number) {\n            return prisma.accessSearchForm.findMany({\n                include: {\n                    form: true,\n                },\n                where: {\n                    roleId: roleId\n                }\n            })\n        },\n        createEmptyAccessSearchForm(roleId: number) {\n            return prisma.accessSearchForm.create({\n                data: {\n                    roleId: roleId\n                }\n            })\n        },\n        updateAccessSearchForm(aformId: number, aform: AccessSearchForm) {\n            return prisma.accessSearchForm.update({\n                where: {\n                    id: aformId\n                },\n                data: {\n                    ...aform,\n                    id: undefined\n                }\n            })\n        },\n        getAccessSearchForm(aformId: number) {\n            return prisma.accessSearchForm.findFirst({\n                where: {\n                    id: aformId\n                }\n            })\n        },\n        deleteAccessSearchForm(aformId: number) {\n            return prisma.accessSearchForm.delete({\n                where: {\n                    id: aformId\n                }\n            })\n        },\n        getUserRoles(userId: number) {\n            return prisma.userRole.findMany({\n                include: {\n                    role: true\n                },\n                where: {\n                    userId: userId\n                }\n            })\n        },\n        createEmptyUserRole(userId: number) {\n            return prisma.userRole.create({\n                data: {\n                    userId: userId\n                }\n            })\n        },\n        updateUserRole(userRoleId: number, userRole: UserRole) {\n            return prisma.userRole.update({\n                where: {\n                    id: userRoleId\n                },\n                data: {\n                    ...userRole,\n                    id: undefined\n                }\n            })\n        },\n        deleteUserRole(userRoleId: number) {\n            return prisma.userRole.delete({\n                where: {\n                    id: userRoleId\n                }\n            })\n        },\n    }\n}", "import { Dictionary, InputForm, SearchForm, Group, InputField, SearchField } from \"@prisma/client\"\nimport { PrismaClient } from \"@prisma/client/extension\";\nimport { IDict, IDictVal } from \"~/types/types\";\n\nexport default function DbModule(prisma: PrismaClient) {\n    return {\n        async getDictValues(dictId: number) {\n            return prisma.$queryRawUnsafe(`SELECT * FROM dic_${dictId}`)\n        },\n        async updateDictValue(dictId: number, dictVal: IDictVal) {\n            if (!dictVal.id) {\n                return prisma.$queryRawUnsafe(`INSERT INTO dic_${dictId}(title_kk, title_ru, is_enabled) values('${dictVal.title_kk}', '${dictVal.title_ru}', ${dictVal.is_enabled})`)\n            } else {\n                return prisma.$queryRawUnsafe(`UPDATE dic_${dictId} SET title_kk='${dictVal.title_kk}', title_ru='${dictVal.title_ru}', is_enabled=${dictVal.is_enabled} WHERE id=${dictVal.id}`)\n            }\n        },\n        async deleteDictValue(dictId: number, id: number) {\n            return prisma.$queryRawUnsafe(`DELETE FROM dic_${dictId} WHERE id=${id}`)\n        },\n        async getDictionaries() {\n            let dicts: IDict[] = []\n            const dictionaries = await prisma.dictionary.findMany()\n            for (const dict of dictionaries) {\n                try {\n                    const [dic1, dic2] = await prisma.$transaction([\n                        prisma.$queryRawUnsafe(`SELECT * FROM dic_${dict.id}`),\n                        prisma.$queryRawUnsafe(`SELECT * FROM dic_${dict.id} WHERE is_enabled = true`)\n                    ])\n                    dicts.push({\n                        id: dict.id,\n                        title_kk: dict.title_kk,\n                        title_ru: dict.title_ru,\n                        data_browse: dic1,\n                        data_edit: dic2\n                    })\n                } catch (e) {\n                    dicts.push({\n                        id: dict.id,\n                        title_kk: dict.title_kk,\n                        title_ru: dict.title_ru,\n                        data_browse: [],\n                        data_edit: []\n                    })\n                }\n            }\n            return dicts\n        },\n        createEmptyDictionary(cnt: number) {\n            return prisma.dictionary.create({\n                data: {\n                    title_kk: `Dictionary ${cnt}`,\n                    title_ru: `Dictionary ${cnt}`,\n                }\n            })\n        },\n        updateDictionary(formId: number, form: Dictionary) {\n            return prisma.dictionary.update({\n                where: {\n                    id: formId\n                },\n                data: {\n                    ...form,\n                    id: undefined\n                }\n            })\n        },\n        getDictionary(formId: number) {\n            return prisma.dictionary.findFirst({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        deleteDictionary(formId: number) {\n            return prisma.dictionary.delete({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        getInputForms() {\n            return prisma.inputForm.findMany({\n                include: {\n                    groups: true,\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        createEmptyInputForm(cnt: number) {\n            return prisma.inputForm.create({\n                data: {\n                    pos: cnt,\n                    title_kk: `Input Form ${cnt}`,\n                    title_ru: `Input Form ${cnt}`,\n                }\n            })\n        },\n        updateInputForm(formId: number, form: InputForm) {\n            return prisma.inputForm.update({\n                where: {\n                    id: formId\n                },\n                data: {\n                    ...form,\n                    id: undefined\n                }\n            })\n        },\n        getInputForm(formId: number) {\n            return prisma.inputForm.findFirst({\n                where: {\n                    id: formId\n                },\n                include: {\n                    groups: {\n                        orderBy: {\n                            pos: 'asc'\n                        },\n                        include: {\n                            fields: {\n                                orderBy: {\n                                    pos: 'asc'\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n        },\n        deleteInputForm(formId: number) {\n            return prisma.inputForm.delete({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        getSearchForms() {\n            return prisma.searchForm.findMany({\n                include: {\n                    fields: true,\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        createEmptySearchForm(cnt: number) {\n            return prisma.searchForm.create({\n                data: {\n                    pos: cnt,\n                    title_kk: `Search Form ${cnt}`,\n                    title_ru: `Search Form ${cnt}`,\n                }\n            })\n        },\n        updateSearchForm(formId: number, form: SearchForm) {\n            return prisma.searchForm.update({\n                where: {\n                    id: formId\n                },\n                data: {\n                    ...form,\n                    id: undefined\n                }\n            })\n        },\n        getSearchForm(formId: number) {\n            return prisma.searchForm.findFirst({\n                include: {\n                    fields: {\n                        orderBy: {\n                            pos: 'asc'\n                        },\n                        include: {\n                            field: true\n                        }\n                    }\n                },\n                where: {\n                    id: formId\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        deleteSearchForm(formId: number) {\n            return prisma.searchForm.delete({\n                where: {\n                    id: formId\n                }\n            })\n        },\n        getGroups(formId: number | null) {\n            if (!formId) return []\n            return prisma.group.findMany({\n                where: {\n                    inputFormId: formId\n                },\n                include: {\n                    fields: true\n                },\n                orderBy: {\n                    pos: 'asc'\n                }\n            })\n        },\n        createEmptyGroup(formId: number, cnt: number) {\n            return prisma.group.create({\n                data: {\n                    pos: cnt,\n                    inputFormId: formId,\n                    title_kk: `Group ${cnt}`,\n                    title_ru: `Group ${cnt}`,\n                }\n            })\n        },\n        getGroup(groupId: number) {\n            return prisma.group.findFirst({\n                include: {\n                    fields: {\n                        orderBy: {\n                            pos: 'asc'\n                        }\n                    }\n                },\n                where: {\n                    id: groupId\n                },\n                orderBy: {\n                    pos: 'asc',\n                }\n            })\n        },\n        updateGroup(groupId: number, group: Group) {\n            return prisma.group.update({\n                where: {\n                    id: groupId\n                },\n                data: {\n                    ...group,\n                    id: undefined,\n                }\n            })\n        },\n        deleteGroup(groupId: number) {\n            return prisma.group.delete({\n                where: {\n                    id: groupId\n                }\n            })\n        },\n        createEmptySearchField(formId: number, cnt: number) {\n            return prisma.searchField.create({\n                data: {\n                    pos: cnt,\n                    searchFormId: formId,\n                    title_kk: `Search Field ${cnt}`,\n                    title_ru: `Search Field ${cnt}`,\n                }\n            })\n        },\n        getSearchField(fieldId: number) {\n            return prisma.searchField.findFirst({\n                where: {\n                    id: fieldId\n                },\n                include: {\n                    field: true\n                }\n            })\n        },\n        updateSearchField(fieldId: number, searchField: SearchField) {\n            return prisma.searchField.update({\n                where: {\n                    id: fieldId\n                },\n                data: {\n                    ...searchField,\n                    id: undefined\n                }\n            })\n        },\n        deleteSearchField(fieldId: number) {\n            return prisma.searchField.delete({\n                where: {\n                    id: fieldId\n                }\n            })\n        },\n        createEmptyInputField(groupId: number, cnt: number) {\n            return prisma.inputField.create({\n                data: {\n                    pos: cnt,\n                    groupId: groupId,\n                    title_kk: `Input Field ${cnt}`,\n                    title_ru: `Input Field ${cnt}`,\n                }\n            })\n        },\n        getInputFields() {\n            return prisma.inputField.findMany({\n                include: {\n                    group: {\n                        include: {\n                            inputForm: true\n                        }\n                    }\n                }\n            })\n        },\n        getInputField(fieldId: number) {\n            return prisma.inputField.findFirst({\n                where: {\n                    id: fieldId\n                },\n            })\n        },\n        updateInputField(fieldId: number, field: InputField) {\n            return prisma.inputField.update({\n                where: {\n                    id: fieldId\n                },\n                data: {\n                    ...field,\n                    id: undefined\n                }\n            })\n        },\n        deleteInputField(fieldId: number) {\n            return prisma.inputField.delete({\n                where: {\n                    id: fieldId\n                }\n            })\n        },\n        generateStructDb() {\n            return prisma.$executeRaw`CALL restructure_db()`\n        },\n    }\n}", "import { PrismaClient } from \"@prisma/client/extension\"\nimport { ICondition } from \"~/types/types\"\n\nexport default function DocModule(prisma: PrismaClient) {\n    return {\n        async getDoc(sid: number | null, inputForm: any) {\n            let tables: any = {}\n            for (const group of inputForm.groups) {\n                let fields: any = { id: null, sid: null, lst: 0 }\n                for (const field of group.fields) {\n                    fields[`f${field.id}`] = ''\n                }\n                tables[`tbl_${group.id}`] = []\n            }\n            let doc = {\n                id: null,\n                formId: inputForm.id,\n                isActive: true,\n                startDate: null,\n                endDate: null,\n                createdAt: null,\n                updatedAt: null,\n                createdUserId: null,\n                updatedUserId: null,\n                ...tables,\n            }\n            if (sid) {\n                let result = await prisma.doc.findFirst({\n                    where: {\n                        id: sid,\n                        isActive: true\n                    }\n                })\n                if (result) {\n                    doc.id = result.id\n                    doc.formId = result.formId\n                    doc.isActive = result.isActive\n                    doc.startDate = result.startDate\n                    doc.endDate = result.endDate\n                    doc.createdAt = result.createdAt\n                    doc.updatedAt = result.updatedAt\n                    doc.createdUserId = result.createdUserId\n                    doc.updatedUserId = result.updatedUserId\n                }\n            }\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                if (doc?.id) {\n                    let sql = 'SELECT id'\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        switch (field.fieldType) {\n                            case \"DATE\":\n                                sql = sql + `, to_char(${fieldName}, 'DD.MM.YYYY') ${fieldName}`\n                                break\n                            case \"TIME\":\n                                sql = sql + `, to_char(f${fieldName}, 'HH:MI') ${fieldName}`\n                                break\n                            default:\n                                sql = sql + `, ${fieldName}`\n                        }\n                    }\n                    sql = sql + ` FROM ${tbl} WHERE sid = ${sid}`\n                    const data = await prisma.$queryRawUnsafe(`${sql}`)\n                    doc[tbl] = data\n                }\n            }\n            return doc\n        },\n        async createDoc(userId: number | null, inputForm: any, doc: any) {\n            const seq = await prisma.$queryRaw`SELECT nextval('doc_id_seq')`\n            const sid = Number(seq[0].nextval)\n            let tr = []\n            tr.push(\n                prisma.doc.create({\n                    data: {\n                        id: sid,\n                        formId: inputForm.id,\n                        isActive: true,\n                        dateStart: null,\n                        dateEnd: null,\n                        createdAt: null,\n                        updatedAt: null,\n                        createdUserId: userId,\n                        updatedUserId: null,\n                    }\n                })\n            )\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                for (const rec of doc[tbl]) {\n                    let flds = \"sid\"\n                    let vals = `${sid}`\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        flds = flds + `, ${fieldName}`\n                        const fieldVal: string = rec[fieldName]\n                        switch (field.fieldType) {\n                            case \"TEXT\":\n                            case \"CYRILLIC\":\n                            case \"DATE\":\n                            case \"TIME\":\n                            case \"FILE\":\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : `'${fieldVal}'`}`\n                                break\n                            default:\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : fieldVal}`\n                                break\n                        }\n                    }\n                    tr.push(prisma.$executeRawUnsafe(`INSERT INTO ${tbl}(${flds}) VALUES(${vals})`))\n                }\n            }\n            return prisma.$transaction(tr)\n        },\n        updateDoc(userId: number | null, inputForm: any, doc: any) {\n            let tr = []\n            tr.push(\n                prisma.doc.update({\n                    where: {\n                        id: doc.id\n                    },\n                    data: {\n                        formId: inputForm.id,\n                        isActive: true,\n                        dateStart: undefined,\n                        dateEnd: undefined,\n                        createdAt: undefined,\n                        updatedAt: undefined,\n                        createdUserId: undefined,\n                        updatedUserId: userId,\n                    }\n                })\n            )\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                // deleting all rows\n                tr.push(prisma.$executeRawUnsafe(`DELETE FROM ${tbl} WHERE sid=${doc.id}`))\n                // inserting rows\n                for (const rec of doc[tbl]) {\n                    let flds = \"sid\"\n                    let vals = `${doc.id}`\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        flds = flds + `, ${fieldName}`\n                        const fieldVal: string = rec[fieldName]\n                        switch (field.fieldType) {\n                            case \"TEXT\":\n                            case \"CYRILLIC\":\n                            case \"DATE\":\n                            case \"TIME\":\n                            case \"FILE\":\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : `'${fieldVal}'`}`\n                                break\n                            default:\n                                vals = vals + `, ${['', '-'].includes(fieldVal) ? 'null' : fieldVal}`\n                                break\n                        }\n                    }\n                    tr.push(prisma.$executeRawUnsafe(`INSERT INTO ${tbl}(${flds}) VALUES(${vals})`))\n                }\n            }\n            return prisma.$transaction(tr)\n        },\n        findDoc(inputForm: any, doc: any) {\n            let sf = ''\n            let select = 'SELECT distinct doc.id'\n            let from = ' FROM \"Doc\" doc'\n            let where = ' WHERE doc.\"isActive\" is true'\n            let tbls: string[] = []\n            for (const group of inputForm.groups) {\n                const tbl = `tbl_${group.id}`\n                if (!group.isMulty) {\n                    for (const field of group.fields) {\n                        const fieldName = `f${field.id}`\n                        const fieldVal = doc[tbl][0][fieldName]\n                        if (!['', '-'].includes(fieldVal)) {\n                            if (!tbls.includes(tbl)) {\n                                tbls.push(tbl)\n                                where = where + ` AND doc.id = ${tbl}.sid`\n                                from = from + `, ${tbl}`\n                            }\n                            switch (field.fieldType) {\n                                case \"TEXT\":\n                                case \"CYRILLIC\":\n                                case \"DATE\":\n                                case \"TIME\":\n                                case \"FILE\":\n                                    where = where + ` AND ${fieldName} = '${fieldVal}'`\n                                    break\n                                default:\n                                    where = where + ` AND ${fieldName} = ${fieldVal}`\n                                    break\n                            }\n                        }\n                    }\n                }\n            }\n            sf = select + from + where\n            return prisma.$queryRawUnsafe(`${sf}`)\n        },\n        deleteDoc(sid: number) {\n            return prisma.doc.update({\n                where: {\n                    id: sid\n                },\n                data: {\n                    isActive: false\n                }\n            })\n        },\n        searchDoc(conditions: ICondition[]) {\n            let sf = ''\n            let select = 'SELECT distinct doc.id'\n            let from = ' FROM \"Doc\" doc'\n            let where = ' WHERE doc.\"isActive\" is true'\n            let tbls: string[] = []\n            let val1 = '', val2 = '', conds = '', sids = ''\n            for (const cond of conditions) {\n                if (cond.log) {\n                    conds = conds + ` ${cond.log}`\n                } else {\n                    const tbl = `tbl_${cond.field?.field.groupId}`\n                    const fieldName = `f${cond.field?.fieldId}`\n                    if (!tbls.includes(tbl)) {\n                        tbls.push(tbl)\n                        sids = sids + ` AND doc.id = ${tbl}.sid`\n                        from = from + `, ${tbl}`\n                    }\n                    switch (cond.field?.field.fieldType) {\n                        case \"TEXT\":\n                        case \"CYRILLIC\":\n                        case \"DATE\":\n                        case \"TIME\":\n                        case \"FILE\":\n                            val1 = `'${cond.val1}'`\n                            val2 = `'${cond.val2}'`\n                            break\n                        default:\n                            val1 = `${cond.val1}`\n                            val2 = `${cond.val2}`\n                            break\n                    }\n                    switch (cond.oper) {\n                        case 'between':\n                            conds = conds + ` ${fieldName} BETWEEN ${val2} AND ${val2}`\n                            break\n                        case '=':\n                        case '>=':\n                        case '>':\n                        case '<':\n                        case '<=':\n                        case '<>':\n                            conds = conds + ` ${fieldName} ${cond.oper} ${val1}`\n                            break\n                        case '=()':\n                            conds = conds + ` ${fieldName} IS NULL`\n                            break\n                        case '<>()':\n                            conds = conds + ` ${fieldName} IS NOT NULL`\n                            break\n                    }\n                }\n            }\n            sf = select + from + where + sids + ' AND ' + conds\n            return prisma.$queryRawUnsafe(`${sf}`)\n        },\n    }\n}", "import prisma from \"./instance\"\nimport UsersModule from \"./users\"\nimport DbModule from \"./db\"\nimport DocModule from \"./doc\"\n\nexport default {\n    users: UsersModule(prisma),\n    db: DbModule(prisma),\n    doc: DocModule(prisma),\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nimport { useState } from \"react\"\nconst { Alert } = MaterialTailwind\n\ntype ErrorMessageProps = {\n    errors?: string,\n}\n\nexport default function ErrorMessage({ errors }: ErrorMessageProps) {\n    const [open, setOpen] = useState(false)\n\n    return (\n        <Alert\n            className=\"text-white bg-red-500\"\n            open={errors !== undefined}\n            onClose={() => setOpen(false)}\n        >\n            {errors ? errors : \"\"}\n        </Alert>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport CustomInput from \"../../elements/custom_input\";\nimport { ICondition } from \"~/types/types\";\nconst { Dialog, Card, CardBody, CardFooter } = MaterialTailwind\n\ntype ConditionDialogProps = {\n    condIndex: number | null,\n    cond: ICondition,\n    setCond: Dispatch<SetStateAction<ICondition>>,\n    show: boolean,\n    setShow: Dispatch<SetStateAction<boolean>>,\n    conditions: ICondition[]\n    setConditions: Dispatch<SetStateAction<ICondition[]>>\n}\n\nexport default function ConditionDialog({\n    condIndex,\n    cond,\n    setCond,\n    show,\n    setShow,\n    conditions,\n    setConditions\n}: ConditionDialogProps) {\n    const handlerOK = () => {\n        if (condIndex !== null) {\n            let conds = [...conditions]\n            conds.splice(condIndex, 1, cond)\n            setConditions(conds)\n        } else {\n            if (conditions.length > 0) {\n                setConditions([...conditions, { log: 'AND' }, cond])\n            } else {\n                setConditions([...conditions, cond])\n            }\n        }\n        setShow(false)\n    }\n\n    return (\n        <Dialog\n            placeholder=\"\"\n            size=\"md\"\n            open={show}\n            handler={() => setShow(false)}\n            className=\"bg-transparent shadow-none\"\n        >\n            <Card className=\"mx-auto w-full\" placeholder=\"\">\n                <CardBody className=\"flex flex-col gap-4 overflow-auto\" placeholder=\"\">\n                    <div className=\"flex justify-between items-center gap-1 w-full\">\n                        <CustomButton\n                            className={`${cond.oper === 'between' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: 'between' })}\n                            disabled={['TEXT', 'CYRILLIC', 'DICT'].includes(String(cond.field?.field.fieldType))}\n                        >\n                            \u0421..\u041F\u041E\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '=' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '=' })}\n                        >\n                            =\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '>' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '>' })}\n                            disabled={['TEXT', 'CYRILLIC', 'DICT'].includes(String(cond.field?.field.fieldType))}\n                        >\n                            &gt;\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '>=' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '>=' })}\n                            disabled={['TEXT', 'CYRILLIC', 'DICT'].includes(String(cond.field?.field.fieldType))}\n                        >\n                            &gt;=\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '<' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '<' })}\n                            disabled={['TEXT', 'CYRILLIC', 'DICT'].includes(String(cond.field?.field.fieldType))}\n                        >\n                            &lt;\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '<=' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '<=' })}\n                            disabled={['TEXT', 'CYRILLIC', 'DICT'].includes(String(cond.field?.field.fieldType))}\n                        >\n                            &lt;=\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '<>' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '<>' })}\n                        >\n                            &lt;&gt;\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '=()' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '=()' })}\n                        >\n                            =()\n                        </CustomButton>\n                        <CustomButton\n                            className={`${cond.oper === '<>()' ? 'bg-green-600  hover:shadow-green-100' : 'bg-blue-gray-600  hover:shadow-blue-gray-100'} flex justify-center flex-1`}\n                            onClick={() => setCond({ ...cond, oper: '<>()' })}\n                        >\n                            &lt;&gt;()\n                        </CustomButton>\n                    </div>\n                    <div className=\"text-sm font-bold text-blue-gray-600\">{cond.field?.title}</div>\n                    <div>\n                        {cond.oper === 'between'\n                            ? <div>\n                                <CustomInput\n                                    id=\"val1\"\n                                    type=\"text\"\n                                    name=\"val1\"\n                                    title=\"Val1: \"\n                                    value={cond.val1}\n                                    onChange={(e) => setCond({ ...cond, val1: e.target.value })}\n                                />\n                                <CustomInput\n                                    id=\"val2\"\n                                    type=\"text\"\n                                    name=\"val2\"\n                                    title=\"Val2: \"\n                                    value={cond.val2}\n                                    onChange={(e) => setCond({ ...cond, val2: e.target.value })}\n                                />\n                            </div>\n                            : <div>\n                                <CustomInput\n                                    id=\"val1\"\n                                    type=\"text\"\n                                    name=\"val1\"\n                                    title=\"Val1: \"\n                                    value={cond.val1}\n                                    onChange={(e) => setCond({ ...cond, val1: e.target.value })}\n                                />\n                            </div>}\n                    </div>\n                </CardBody>\n                <CardFooter className=\"pt-0 flex flex-row gap-3\" placeholder=\"\">\n                    <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-green-100\"\n                        onClick={() => handlerOK()}\n                    >\n                        OK\n                    </CustomButton>\n                    <CustomButton\n                        className=\"bg-blue-gray-500 hover:shadow-green-100\"\n                        onClick={() => setShow(false)}\n                    >\n                        Cancel\n                    </CustomButton>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}", "import outlined from '@material-tailwind/react/theme/components/timeline/timelineIconColors/outlined';\nimport { ReactNode, ButtonHTMLAttributes } from 'react';\n\ninterface CustomButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    className?: string,\n    outline?: boolean,\n    children?: ReactNode,\n}\n\nexport default function CustomButton({ className, outline, children, ...props }: CustomButtonProps) {\n    let cls = \"\"\n    if (outline) {\n        cls = `border text-xs py-1.5 px-3.5 flex items-center gap-2 rounded-md hover:cursor-pointer hover:shadow-lg font-semibold uppercase ${className}`\n    } else {\n        cls = `text-white text-xs py-1.5 px-3.5 flex items-center gap-2 rounded-md hover:cursor-pointer hover:shadow-lg font-semibold uppercase ${className}`\n    }\n    return (\n        <button {...props}\n            className={cls}\n        >\n            {children}\n        </button>\n    );\n};\n", "import { ReactNode, InputHTMLAttributes } from 'react';\n\ninterface CustomInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    className?: string,\n    subClass?: string,\n    id: string,\n    title?: string,\n    errors?: string,\n    children?: ReactNode,\n}\n\nexport default function CustomInput({ className, subClass, id, title, errors, children, ...props }: CustomInputProps) {\n    return (\n        <div\n            className={`${className} p-1 flex items-baseline`}\n        >\n            <label\n                className=\"font-bold text-sm mr-1 min-w-40\"\n                htmlFor={id}\n            >\n                {title}\n            </label>\n            <div className=\"flex flex-col justify-between\">\n                <input\n                    id={id}\n                    className={`${subClass} font-mono font-bold text-sm border-2 p-1 focus:outline-blue-gray-500`}\n                    {...props}\n                >\n                    {children}\n                </input>\n                <span className=\"text-sm text-red-500 h-4\">{errors}</span>\n            </div>\n        </div>\n    );\n};", "import { ICondition } from \"~/types/types\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useSubmit } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonSearchProps = {\n    userId: number,\n    inputFormId: number,\n    conditions: ICondition[]\n}\n\nexport default function ButtonSearch({\n    userId,\n    inputFormId,\n    conditions\n}: ButtonSearchProps) {\n    const { t } = useTranslation()\n    const submit = useSubmit()\n    const handleSearch = () => {\n        submit({\n            _action: \"searchDocument\",\n            _user: userId,\n            _inputFormId: inputFormId,\n            json: JSON.stringify(conditions)\n        }, {\n            method: \"post\",\n        })\n    }\n\n    return (\n        <CustomButton\n            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n            onClick={() => handleSearch()}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\" />\n            </svg>\n            {t('search')}\n        </CustomButton>\n    )\n}", "import { ICondition } from \"~/types/types\";\nimport ButtonSearch from \"./btn_search\";\n\ntype ButtonsProps = {\n    userId: number,\n    inputFormId: number,\n    conditions: ICondition[]\n}\n\nexport default function Buttons({ userId, inputFormId, conditions }: ButtonsProps) {\n    return (\n        <div\n            className=\"flex items-center gap-3\"\n        >\n            <ButtonSearch\n                userId={userId}\n                inputFormId={inputFormId}\n                conditions={conditions}\n            />\n        </div>\n    )\n}", "import { ReactNode } from \"react\"\n\ntype PanelProps = {\n    className?: string,\n    children?: ReactNode,\n}\nexport default function Panel({ className, children, ...props }: PanelProps) {\n    return (\n        <div\n            className={`${className} bg-white border p-1 shadow-blue-gray-700 shadow-md`}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n}", "import { InputField, SearchField } from \"@prisma/client\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport { ICondition } from \"~/types/types\"\n\ntype ListFieldsProps = {\n    searchForm: any,\n    fld: SearchField & { field: InputField } | null\n    setFld: Dispatch<SetStateAction<SearchField & { field: InputField } | null>>,\n    handleOpenCondition: (cond: ICondition, condIndex: number | null) => void\n}\n\nexport default function ListFields({ searchForm, fld, setFld, handleOpenCondition }: ListFieldsProps) {\n    return (\n        <div className=\"w-1/3\">\n            {searchForm && searchForm.fields.map((field: SearchField & { field: InputField }) => (\n                <div\n                    key={field.id}\n                    className={`${fld?.id === field.id ? 'bg-blue-gray-100' : ''} hover:cursor-pointer hover:bg-blue-gray-100 select-none`}\n                    onClick={() => setFld(field)}\n                    onDoubleClick={() => handleOpenCondition({\n                        oper: ['TEXT', 'CYRILLIC', 'DICT'].includes(field.field.fieldType) ? '=' : 'between',\n                        field: field\n                    }, null)}\n                >\n                    {field.title}\n                </div>\n            ))}\n        </div>\n    )\n}", "import { ICondition } from \"~/types/types\";\nimport ErrorMessage from \"../../elements/error_message\";\nimport ConditionDialog from \"./dlg_condition\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport Buttons from \"./buttons/buttons\";\nimport Panel from \"../../elements/panel\";\nimport ListFields from \"./list_fields\";\nimport { InputField, SearchField } from \"@prisma/client\";\nimport { useSubmit } from \"@remix-run/react\";\nimport ConditionButtons from \"./cond_buttons\";\nimport ListConditions from \"./list_conditions\";\n\ntype SearchDataViewProps = {\n    errors?: string,\n    condIndex: number | null,\n    setCondIndex: Dispatch<SetStateAction<number | null>>,\n    cond: ICondition,\n    setCond: Dispatch<SetStateAction<ICondition>>,\n    show: boolean,\n    setShow: Dispatch<SetStateAction<boolean>>,\n    conditions: ICondition[]\n    setConditions: Dispatch<SetStateAction<ICondition[]>>,\n    userId: number,\n    inputFormId: number,\n    searchForm: any,\n    fld: SearchField & { field: InputField } | null\n    setFld: Dispatch<SetStateAction<SearchField & { field: InputField } | null>>\n}\n\nexport default function SearchDataView({\n    errors,\n    condIndex,\n    setCondIndex,\n    cond,\n    setCond,\n    show,\n    setShow,\n    conditions,\n    setConditions,\n    userId,\n    inputFormId,\n    searchForm,\n    fld,\n    setFld,\n}: SearchDataViewProps) {\n    const submit = useSubmit()\n\n    const handleOpenCondition = (cond: ICondition, condIndex: number | null = null) => {\n        setCondIndex(condIndex)\n        setCond(cond)\n        setShow(true)\n    }\n\n    const handleAddCondition = () => {\n        if (fld) {\n            handleOpenCondition({\n                oper: ['TEXT', 'CYRILLIC', 'DICT'].includes(fld.field.fieldType) ? '=' : 'between',\n                field: fld\n            })\n        }\n    }\n\n    const handleDeleteCondition = () => {\n        if (condIndex !== null) {\n            let conds = [...conditions]\n            if (conds[condIndex].log) {\n                conds.splice(condIndex, 1)\n            } else {\n                conds.splice(condIndex - 1, 2)\n            }\n            setConditions(conds)\n        }\n    }\n\n    const handleEraseConditions = () => {\n        setConditions([])\n    }\n\n    const handleBktBoth = () => {\n        if (conditions.length > 0) {\n            setConditions([\n                { log: '(' }, ...conditions, { log: ')' }])\n        }\n    }\n\n    const handleBktLeft = () => {\n        if (condIndex !== null && !conditions[condIndex].log) {\n            let conds = [...conditions]\n            conds.splice(condIndex, 0, { log: '(' })\n            setConditions(conds)\n        }\n    }\n\n    const handleBktRight = () => {\n        if (condIndex !== null && !conditions[condIndex].log) {\n            let conds = [...conditions]\n            conds.splice(condIndex + 1, 0, { log: ')' })\n            setConditions(conds)\n        }\n    }\n\n    const handleReplaceOrAnd = (log: string) => {\n        if (condIndex !== null && ['OR', 'AND'].includes(String(conditions[condIndex].log))) {\n            let conds = [...conditions]\n            conds.splice(condIndex, 1, { log: log })\n            setConditions(conds)\n        }\n    }\n\n    return (\n        <div className=\"h-[calc(100vh-5rem)] flex flex-col gap-3 pb-5\">\n            <ErrorMessage errors={errors} />\n            <ConditionDialog\n                condIndex={condIndex}\n                cond={cond}\n                setCond={setCond}\n                show={show}\n                setShow={setShow}\n                conditions={conditions}\n                setConditions={setConditions}\n            />\n            <Panel className=\"h-full overflow-auto\">\n                <Buttons\n                    userId={userId}\n                    inputFormId={inputFormId}\n                    conditions={conditions}\n                />\n                <div className=\"flex flex-row\">\n                    <ListFields\n                        searchForm={searchForm}\n                        fld={fld}\n                        setFld={setFld}\n                        handleOpenCondition={handleOpenCondition}\n                    />\n                    <ConditionButtons\n                        handleAddCondition={handleAddCondition}\n                        handleDeleteCondition={handleDeleteCondition}\n                        handleEraseConditions={handleEraseConditions}\n                        handleBktBoth={handleBktBoth}\n                        handleBktLeft={handleBktLeft}\n                        handleBktRight={handleBktRight}\n                        handleReplaceOrAnd={handleReplaceOrAnd}\n                    />\n                    <ListConditions\n                        conditions={conditions}\n                        condIndex={condIndex}\n                        setCondIndex={setCondIndex}\n                        handleOpenCondition={handleOpenCondition}\n                    />\n                </div>\n            </Panel>\n        </div>\n    )\n}", "import CustomButton from \"../../elements/custom_button\"\n\ntype ConditionButtonsProps = {\n    handleAddCondition: () => void,\n    handleDeleteCondition: () => void,\n    handleEraseConditions: () => void,\n    handleBktBoth: () => void,\n    handleBktLeft: () => void,\n    handleBktRight: () => void,\n    handleReplaceOrAnd: (log: string) => void\n}\n\nexport default function ConditionButtons({\n    handleAddCondition,\n    handleDeleteCondition,\n    handleEraseConditions,\n    handleBktBoth,\n    handleBktLeft,\n    handleBktRight,\n    handleReplaceOrAnd\n}: ConditionButtonsProps) {\n    return (\n        <div className=\"self-center flex flex-col justify-center gap-1\">\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleAddCondition()}\n            >\n                Add\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleDeleteCondition()}\n            >\n                Delete\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleEraseConditions()}\n            >\n                Erase\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleBktBoth()}\n            >\n                ()\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleBktLeft()}\n            >\n                (\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleBktRight()}\n            >\n                )\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleReplaceOrAnd('OR')}\n            >\n                OR\n            </CustomButton>\n            <CustomButton\n                className=\"bg-blue-gray-500 hover:shadow-blue-gray-100 text-2xl w-16 h-16 flex justify-center\"\n                onClick={() => handleReplaceOrAnd('AND')}\n            >\n                AND\n            </CustomButton>\n        </div>\n    )\n}", "import { Dispatch, SetStateAction } from \"react\"\nimport { ICondition } from \"~/types/types\"\n\ntype ListConditionsProps = {\n    conditions: ICondition[],\n    condIndex: number | null,\n    setCondIndex: Dispatch<SetStateAction<number | null>>,\n    handleOpenCondition: (cond: ICondition, condIndex: number | null) => void\n}\n\nexport default function ListConditions({\n    conditions,\n    condIndex,\n    setCondIndex,\n    handleOpenCondition\n}: ListConditionsProps) {\n    return (\n        <div className=\"w-2/3\">\n            {conditions.map((c: ICondition, index: number) => (\n                <div\n                    key={index}\n                    className={`${condIndex === index ? 'bg-blue-gray-100' : ''} hover:cursor-pointer`}\n                    onClick={() => setCondIndex(index)}\n                >\n                    {c.log\n                        ? <div\n\n                        >---- {c.log} ----</div>\n                        : <div\n                            onDoubleClick={() => handleOpenCondition(c, index)}\n                        >\n                            {c.field?.title} {c.oper} {c.val1} {c.val2}\n                        </div>}\n                </div>\n            ))}\n        </div>\n    )\n}", "import { Prisma } from \"@prisma/client\";\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect, unstable_composeUploadHandlers, unstable_createFileUploadHandler, unstable_createMemoryUploadHandler, unstable_parseMultipartFormData } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useNavigation, useOutletContext } from \"@remix-run/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport api from '~/components/api';\nimport EnterDataView from \"~/components/UI/widgets/enter_data/view\";\nimport { ContexType } from \"~/types/types\";\n\nexport async function loader({\n    request,\n    params,\n}: LoaderFunctionArgs) {\n    const url = new URL(request.url)\n    const state = url.searchParams.get(\"state\")\n    const docId = url.searchParams.get(\"docId\")\n    let inputForm = await api.db.getInputForm(Number(params.formId))\n    let doc = await api.doc.getDoc(docId ? Number(docId) : null, inputForm)\n    return json({ inputForm, doc, state })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let ok: boolean = false\n    let errors: string = ''\n    let docs: { formId?: number, ids?: number[] } | null = null\n    let deletedDocId: number | null = null\n    // const handler = unstable_createFileUploadHandler({\n    //     directory: `${process.cwd()}/public/uploads`,\n    //     file: ({ filename }) => filename,\n    //     maxPartSize: 50_000_000\n    // });\n    // const uploadHandler = unstable_composeUploadHandlers(\n    //     async ({ name, data }) => {\n    //         return \"url\";\n    //     },\n    //     unstable_createMemoryUploadHandler()\n    // );\n    const uploadHandler = unstable_composeUploadHandlers(\n        unstable_createFileUploadHandler({\n            directory: `${process.cwd()}/public/uploads`,\n            file: ({ filename }) => filename,\n            maxPartSize: 50_000_000\n        }),\n        // parse everything else into memory\n        unstable_createMemoryUploadHandler()\n    );\n    const formData = await unstable_parseMultipartFormData(request, uploadHandler);\n    console.log(formData)\n    // const file = formData.get(\"file\") as File;\n    // const formData = await request.formData()\n    const {\n        _action,\n        _user,\n        _inputFormId,\n        _id,\n        ...values\n    } = Object.fromEntries(formData)\n    console.log(values)\n    switch (_action) {\n        case 'saveDocument': {\n            try {\n                // let inputForm = await api.db.getInputForm(Number(_inputFormId))\n                // let jsonData = JSON.parse(String(values.json))\n                // if (_id) {\n                //     await api.doc.updateDoc(Number(_user), inputForm, jsonData)\n                //     return redirect(`/dashboard/enter_data/${_inputFormId}?docId=${_id}`)\n                // } else {\n                //     await api.doc.createDoc(Number(_user), inputForm, jsonData)\n                //     return redirect(`/dashboard/enter_data/${_inputFormId}`)\n                // }\n            } catch (e) {\n                if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                    errors = e.message\n                } else {\n                    throw e\n                }\n            }\n            break\n        }\n        case 'findDocument': {\n            try {\n                let inputForm = await api.db.getInputForm(Number(_inputFormId))\n                let jsonData = JSON.parse(String(values.json))\n                const results: { id: number }[] | [] = await api.doc.findDoc(inputForm, jsonData)\n                if (results.length > 100) {\n                    errors = \"Find records more 100\"\n                } else {\n                    docs = {\n                        formId: inputForm.id,\n                        ids: results.map((item: any) => item.id)\n                    }\n                    ok = true\n                }\n            } catch (e) {\n                if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                    errors = e.message\n                } else {\n                    throw e\n                }\n            }\n            break\n        }\n        case 'deleteDocument': {\n            try {\n                if (_id) {\n                    await api.doc.deleteDoc(Number(_id))\n                    deletedDocId = (Number(_id))\n                    ok = true\n                }\n            } catch (e) {\n                if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                    errors = e.message\n                } else {\n                    throw e\n                }\n            }\n            break\n        }\n    }\n    return json({ errors, docs, deletedDocId, ok })\n}\n\nexport default function EnterData() {\n    const { dictionaries, docs, setDocs, current, setCurrent } = useOutletContext<ContexType>()\n    const { inputForm, doc, state } = useLoaderData<typeof loader>()\n    const [document, setDocument] = useState<typeof doc>(doc)\n    const navigation = useNavigation()\n    const formRef = useRef<HTMLFormElement>(null)\n    const userId = 1;\n    const data = useActionData<typeof action>()\n    const [showFind, setShowFind] = useState(false)\n\n    useEffect(() => {\n        setDocument(doc)\n    }, [doc])\n\n\n    useEffect(() => {\n        if (data?.docs && data?.ok) {\n            setDocs(data.docs)\n            setShowFind(true)\n        }\n        if (navigation.state === \"idle\" && data?.ok) {\n            formRef.current?.reset()\n        }\n        if (data?.deletedDocId && data?.ok) {\n            setDocs(prev => ({ formId: prev.formId, ids: prev.ids?.filter(item => item !== data.deletedDocId) }))\n        }\n    }, [data])\n\n    return (\n        <EnterDataView\n            errors={data?.errors}\n            open={showFind}\n            setOpen={setShowFind}\n            docs={docs}\n            userId={userId}\n            current={current}\n            setCurrent={setCurrent}\n            formRef={formRef}\n            inputForm={inputForm}\n            state={state}\n            dictionaries={dictionaries}\n            doc={document}\n            setDoc={setDocument}\n        />\n    )\n}", "import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport ErrorMessage from \"../../elements/error_message\";\nimport Buttons from \"./buttons/buttons\";\nimport DialogFindResult from \"./dlg_find_result\";\nimport RecNavigator from \"./rec_navigator\";\nimport Panel from \"../../elements/panel\";\nimport EditForm from \"./edit_form/edit_form\";\nimport DialogMultyGroup from \"./dlg_multy_group\";\nimport { Group, InputField } from \"@prisma/client\";\n\ntype EnterDataViewProps = {\n    errors?: string,\n    open: boolean,\n    setOpen: Dispatch<SetStateAction<boolean>>,\n    docs: { formId?: number, ids?: number[] },\n    userId: number,\n    current: number,\n    setCurrent: Dispatch<SetStateAction<number>>,\n    formRef: any,\n    inputForm: any,\n    state: string | null,\n    dictionaries: any,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n}\n\nexport default function EnterDataView({\n    errors,\n    open,\n    setOpen,\n    docs,\n    userId,\n    current,\n    setCurrent,\n    formRef,\n    inputForm,\n    state,\n    dictionaries,\n    doc,\n    setDoc,\n}: EnterDataViewProps) {\n    const [group, setGroup] = useState<Group & { fields: InputField[] } | null>(null)\n    const [recordIndex, setRecordIndex] = useState<number>(0)\n\n    return (\n        <div className=\"h-[calc(100vh-5rem)] flex flex-col gap-3 pb-5\">\n            <ErrorMessage errors={errors} />\n            <DialogFindResult\n                open={open}\n                setOpen={setOpen}\n                docs={docs}\n            />\n            <DialogMultyGroup\n                state={state}\n                group={group}\n                setGroup={setGroup}\n                dictionaries={dictionaries}\n                doc={doc}\n                setDoc={setDoc}\n                recordIndex={recordIndex}\n            />\n            <Panel className=\"h-full overflow-auto\">\n                <div className=\"py-2 flex justify-between items-center\">\n                    <Buttons userId={userId} inputFormId={inputForm.id} doc={doc} state={state} />\n                    <RecNavigator docs={docs} current={current} setCurrent={setCurrent} />\n                </div>\n                <EditForm\n                    formRef={formRef}\n                    userId={userId}\n                    inputForm={inputForm}\n                    state={state}\n                    dictionaries={dictionaries}\n                    setGroup={setGroup}\n                    doc={doc}\n                    setDoc={setDoc}\n                    setRecordIndex={setRecordIndex}\n                />\n            </Panel>\n        </div>\n    )\n}", "import { useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonCancelProps = {\n    inputFormId: number,\n    docId: number | undefined\n}\n\nexport default function ButtonCancel({ inputFormId, docId }: ButtonCancelProps) {\n    const { t } = useTranslation()\n    const navigate = useNavigate()\n\n    return (\n        <CustomButton\n            outline={true}\n            className=\"hover:shadow-primary_shadow text-primary border-primary\"\n            onClick={() => navigate(`/dashboard/enter_data/${inputFormId}?docId=${docId}`)}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n            </svg>\n\n            {t('cancel')}\n        </CustomButton>\n    )\n}", "import { useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonCreateProps = {\n    inputFormId: number\n}\n\nexport default function ButtonCreate({ inputFormId }: ButtonCreateProps) {\n    const { t } = useTranslation()\n    const navigate = useNavigate()\n\n    return (\n        <CustomButton\n            className=\"bg-primary hover:shadow-primary_shadow\"\n            onClick={() => navigate(`/dashboard/enter_data/${inputFormId}?state=create`)}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n            </svg>\n            {t('create')}\n        </CustomButton>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonDeleteProps = {\n    userId: number,\n    inputFormId: number,\n    doc: any\n}\n\nexport default function ButtonDelete({ userId, inputFormId, doc }: ButtonDeleteProps) {\n    const { t } = useTranslation()\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to delete this record.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"_user\" value={userId} />\n            <input type=\"hidden\" name=\"_inputFormId\" value={inputFormId} />\n            <input type=\"hidden\" name=\"_id\" value={doc.id ? doc.id : ''} />\n            <CustomButton\n                className=\"bg-red-500 hover:shadow-red-100\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteDocument\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                </svg>\n                {t('delete')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form, useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonEditProps = {\n    inputFormId: number,\n    docId: number\n}\n\nexport default function ButtonEdit({ inputFormId, docId }: ButtonEditProps) {\n    const { t } = useTranslation()\n    const navigate = useNavigate()\n\n    return (\n        <CustomButton\n            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n            onClick={() => navigate(`/dashboard/enter_data/${inputFormId}?state=edit&docId=${docId}`)}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125\" />\n            </svg>\n            {t('edit')}\n        </CustomButton>\n    )\n}", "import { useTranslation } from \"react-i18next\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useSubmit } from \"@remix-run/react\";\n\ntype ButtonFindProps = {\n    userId: number,\n    inputFormId: number,\n    doc: any\n}\n\nexport default function ButtonFind({ userId, inputFormId, doc }: ButtonFindProps) {\n    const { t } = useTranslation()\n    const submit = useSubmit()\n\n    const handleFind = () => {\n        submit({\n            _action: \"findDocument\",\n            _user: userId,\n            _inputFormId: inputFormId,\n            _id: doc.id ? doc.id : '',\n            json: JSON.stringify(document)\n        }, {\n            method: \"post\",\n        })\n    }\n    return (\n        <CustomButton\n            className=\"bg-blue-gray-500 hover:shadow-blue-gray-100\"\n            onClick={() => handleFind()}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\" />\n            </svg>\n            {t('find')}\n        </CustomButton>\n    )\n}", "import { useTranslation } from \"react-i18next\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useSubmit } from \"@remix-run/react\";\n\ntype ButtonSaveProps = {\n    userId: number,\n    inputFormId: number,\n    doc: any\n}\n\nexport default function ButtonSave({ userId, inputFormId, doc }: ButtonSaveProps) {\n    const { t } = useTranslation()\n    // const submit = useSubmit()\n\n    // const handleSave = () => {\n    //     submit({\n    //         _action: \"saveDocument\",\n    //         _user: userId ? userId : '',\n    //         _inputFormId: inputFormId ? inputFormId : '',\n    //         _id: doc.id ? doc.id : '',\n    //         json: JSON.stringify(doc)\n    //     }, {\n    //         method: \"post\",\n    //     })\n    // }\n    return (\n        <CustomButton\n            className=\"bg-primary hover:shadow-primary_shadow\"\n            // onClick={() => handleSave()}\n            form=\"documentForm\"\n            type=\"submit\"\n            name=\"_action\"\n            value=\"saveDocument\"\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 5.25 7.5 7.5 7.5-7.5m-15 6 7.5 7.5 7.5-7.5\" />\n            </svg>\n            {t('save')}\n        </CustomButton>\n    )\n}", "import { Form, useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonSearchProps = {\n    inputFormId: number,\n}\n\nexport default function ButtonSearch({ inputFormId }: ButtonSearchProps) {\n    const { t } = useTranslation()\n    const navigate = useNavigate()\n\n    return (\n        <CustomButton\n            className=\"bg-primary hover:shadow-primary_shadow\"\n            onClick={() => navigate(`/dashboard/enter_data/${inputFormId}?state=search`)}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\" />\n            </svg>\n            {t('search')}\n        </CustomButton>\n    )\n}", "import ButtonCancel from \"./btn_cancel\";\nimport ButtonCreate from \"./btn_create\";\nimport ButtonDelete from \"./btn_delete\";\nimport ButtonEdit from \"./btn_edit\";\nimport ButtonFind from \"./btn_find\";\nimport ButtonSave from \"./btn_save\";\nimport ButtonSearch from \"./btn_search\";\n\ntype ButtonsProps = {\n    userId: number,\n    inputFormId: number,\n    state: string | null,\n    doc: any\n}\n\nexport default function Buttons({ userId, inputFormId, state, doc }: ButtonsProps) {\n    return (\n        <div\n            className=\"flex items-center gap-3\"\n        >\n            {!['create', 'edit', 'search'].includes(String(state))\n                ? <ButtonCreate inputFormId={inputFormId} />\n                : null}\n            {!['create', 'edit', 'search'].includes(String(state))\n                ? <ButtonSearch inputFormId={inputFormId} />\n                : null}\n            {state === \"search\"\n                ? <ButtonFind userId={userId} inputFormId={inputFormId} doc={doc} />\n                : null}\n            {doc.id && !['create', 'edit'].includes(String(state))\n                ? <ButtonEdit inputFormId={inputFormId} docId={doc.id} />\n                : null}\n            {state === 'edit' || state === 'create'\n                ? <ButtonSave userId={userId} inputFormId={inputFormId} doc={doc} />\n                : null}\n            {state === 'edit' || state === 'search' || state === 'create'\n                ? <ButtonCancel inputFormId={inputFormId} docId={doc.id} />\n                : null}\n            {doc.id && !['create', 'edit'].includes(String(state))\n                ? <ButtonDelete userId={userId} inputFormId={inputFormId} doc={doc} />\n                : null}\n        </div>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nimport { useNavigate } from \"@remix-run/react\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport CustomButton from \"../../elements/custom_button\"\nimport { useTranslation } from \"react-i18next\"\nconst { Dialog, Card, CardBody, CardFooter } = MaterialTailwind\n\ntype DialogFindResultProps = {\n    open: boolean,\n    setOpen: Dispatch<SetStateAction<boolean>>,\n    docs: { formId?: number, ids?: number[] },\n}\n\nexport default function DialogFindResult({ open, setOpen, docs }: DialogFindResultProps) {\n    const { t } = useTranslation()\n    const navigate = useNavigate()\n    const handleOpenInputForm = () => {\n        setOpen(false)\n        if (docs && docs.ids?.length) {\n            navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[0]}`)\n        } else {\n            navigate(`/dashboard/enter_data/${docs.formId}?state=search`)\n        }\n    }\n\n    return (\n        <Dialog\n            placeholder=\"\"\n            size=\"sm\"\n            open={open}\n            handler={() => handleOpenInputForm()}\n            className=\"bg-transparent shadow-none\"\n        >\n            <Card className=\"mx-auto w-full\" placeholder=\"\">\n                <CardBody className=\"flex flex-col gap-4 overflow-auto\" placeholder=\"\">\n                    {docs && docs.ids?.length\n                        ? <div className=\"text-bold p-1\">{t('find_result')}: {docs.ids?.length}</div>\n                        : <div className=\"text-bold p-1\">{t('nothing')}</div>}\n\n                </CardBody>\n                <CardFooter className=\"pt-0 flex flex-row gap-3 justify-center\" placeholder=\"\">\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        onClick={() => handleOpenInputForm()}\n                    >\n                        OK\n                    </CustomButton>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}", "import { Link, useNavigate } from \"@remix-run/react\";\nimport { ChangeEvent, Dispatch, KeyboardEvent, SetStateAction, useState } from \"react\";\n\ntype RecNavigatorProps = {\n    docs: any,\n    current: number,\n    setCurrent: Dispatch<SetStateAction<number>>\n}\n\nexport default function RecNavigator({ docs, current, setCurrent }: RecNavigatorProps) {\n    const [val, setVal] = useState(current)\n    const navigate = useNavigate()\n    const handleFirst = () => {\n        setVal(0)\n        setCurrent(0)\n        navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[0]}`)\n    }\n    const handlePrev = () => {\n        if (current > 0) {\n            --current\n            setVal(current)\n            setCurrent(current)\n            navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[current]}`)\n        }\n    }\n    const handleNext = () => {\n        const lastIndex = docs.ids.length - 1\n        if (current < lastIndex) {\n            ++current\n            setVal(current)\n            setCurrent(current)\n            navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[current]}`)\n        }\n    }\n    const handleLast = () => {\n        const lastIndex = docs.ids.length - 1\n        setVal(lastIndex)\n        setCurrent(lastIndex)\n        navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[lastIndex]}`)\n    }\n    const handleSeek = (val: number) => {\n        if (val < 0) {\n            val = 0\n        }\n        if (val > docs.ids.length - 1) {\n            val = docs.ids.length - 1\n        }\n        setVal(val)\n        setCurrent(val)\n        navigate(`/dashboard/enter_data/${docs.formId}?docId=${docs.ids[val]}`)\n    }\n    return (\n        <div>\n            {docs && docs.ids\n                ? <div className=\"flex gap-1 justify-end items-center text-xs\">\n                    <p className=\"text-blue-gray-600 font-bold\">\n                        {current + 1} / {docs.ids.length}\n                    </p>\n                    <input\n                        className=\"p-1 text-blue-gray-600 focus:outline-0 w-20\"\n                        type=\"number\"\n                        max={docs.ids.length}\n                        min={1}\n                        value={val + 1}\n                        onChange={(e) => setVal(Number(e.target.value) - 1)}\n\n                    />\n                    <button\n                        className=\"w-20 text-center border bg-blue-gray-500 p-1 font-bold text-white rounded\"\n                        onClick={() => handleSeek(val)}\n                    >\n                        Seek\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handleFirst()}\n                    >\n                        &lt;&lt;\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handlePrev()}\n                    >\n                        &lt;\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handleNext()}\n                    >\n                        &gt;\n                    </button>\n                    <button\n                        className=\"w-8 text-center border bg-orange-700 p-1 font-bold text-white rounded\"\n                        onClick={() => handleLast()}\n                    >\n                        &gt;&gt;\n                    </button>\n                </div>\n                : null}\n        </div>\n    )\n}", "import { Form, useLocation, useSubmit } from \"@remix-run/react\";\nimport SingleGroup from \"./single_group\";\nimport MultyGroup from \"./multy_group\";\nimport { Dispatch, FormEvent, SetStateAction } from \"react\";\nimport { Group, InputField } from \"@prisma/client\";\nimport { useTranslation } from \"react-i18next\";\n\n\ntype EditFormProps = {\n    formRef: any,\n    userId: number,\n    inputForm: any,\n    state: string | null,\n    dictionaries: any,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n    setGroup: Dispatch<SetStateAction<Group & { fields: InputField[] } | null>>,\n    setRecordIndex: Dispatch<SetStateAction<number>>,\n}\n\nexport default function EditForm({\n    formRef,\n    userId,\n    inputForm,\n    state,\n    dictionaries,\n    setGroup,\n    doc,\n    setDoc,\n    setRecordIndex\n}: EditFormProps) {\n    const { i18n } = useTranslation()\n    const location = useLocation()\n    const submit = useSubmit()\n    const handleSave = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        let formData = new FormData(e.currentTarget)\n        formData.append(\"_action\", \"saveDocument\")\n        inputForm?.groups.forEach(\n            (group: Group & { fields: InputField[] }) => {\n                if (group.isMulty) {\n                    let tableName = `tbl_${group.id}`\n                    for (let i = 0; i < doc[tableName].length; i++) {\n                        group.fields.forEach((fld: InputField) => {\n                            let fieldName = `f${fld.id}`\n                            let r = `${tableName}__${fieldName}__${i}`\n                            formData.append(r, doc[tableName][i][fieldName])\n                        })\n                    }\n                    formData.append(`${tableName}__count`, doc[tableName].length)\n                }\n            })\n        submit(formData, {\n            method: 'post',\n            encType: 'multipart/form-data'\n        })\n    }\n\n    return (\n        <form\n            key={location.key}\n            id=\"documentForm\"\n            method=\"post\"\n            ref={formRef}\n            onSubmit={handleSave}\n        >\n            <input type=\"hidden\" name=\"_user\" value={userId} />\n            <input type=\"hidden\" name=\"_inputFormId\" value={inputForm.id} />\n            <input type=\"hidden\" name=\"_id\" value={doc.id ? doc.id : ''} />\n            {inputForm?.groups && inputForm.groups.map((group: Group & { fields: InputField[] }) => {\n                let groupTitle = group[`title_${i18n.language}` as keyof typeof group] as string\n                return (\n                    <div key={group.id} className=\"mb-2\">\n                        <h2 className=\"col-span-3 bg-primary text-white font-bold text-sm p-1 pl-4\">\n                            {groupTitle}\n                        </h2>\n                        {!group.isMulty\n                            ? <SingleGroup\n                                state={state}\n                                dictionaries={dictionaries}\n                                group={group}\n                                doc={doc}\n                                setDoc={setDoc}\n                            />\n                            : <MultyGroup\n                                state={state}\n                                dictionaries={dictionaries}\n                                group={group}\n                                setGroup={setGroup}\n                                doc={doc}\n                                setDoc={setDoc}\n                                setRecordIndex={setRecordIndex}\n                            />}\n                    </div>\n                )\n            })}\n        </form>\n    )\n}", "import { ReactNode, SelectHTMLAttributes } from 'react';\n\ninterface CustomSelectProps extends SelectHTMLAttributes<HTMLSelectElement> {\n    className?: string,\n    id: string,\n    title?: string,\n    errors?: string,\n    children?: ReactNode,\n}\n\nexport default function CustomSelect({ className, id, title, errors, children, ...props }: CustomSelectProps) {\n    return (\n        <div\n            className={`${className} p-1 flex items-baseline`}\n        >\n            <label\n                className=\"font-bold text-sm mr-1 min-w-40\"\n                htmlFor={id}\n            >\n                {title}\n            </label>\n            <div className=\"flex flex-col justify-between\">\n                <select\n                    id={id}\n                    className=\"font-mono text-sm border-2 p-1 focus:outline-blue-gray-500 bg-white\"\n                    {...props}\n                >\n                    {children}\n                </select>\n                <span className=\"text-sm text-red-500 h-4\">{errors}</span>\n            </div>\n        </div>\n    );\n};", "import { IDict } from \"~/types/types\"\nimport CustomInput from \"~/components/UI/elements/custom_input\"\nimport CustomSelect from \"~/components/UI/elements/custom_select\"\nimport { useTranslation } from \"react-i18next\"\n\ntype FieldProps = {\n    state: string | null,\n    dictionaries: any,\n    cls: string,\n    fieldName: string,\n    fieldType: string,\n    fieldTitle: string,\n    fieldLen: number,\n    fieldRequired: boolean,\n    fieldDisabled: boolean,\n    fieldDict: number | null,\n    val: string,\n}\n\nexport default function Field({\n    state,\n    dictionaries,\n    cls,\n    fieldName,\n    fieldType,\n    fieldTitle,\n    fieldLen,\n    fieldRequired,\n    fieldDisabled,\n    fieldDict,\n    val,\n}: FieldProps) {\n    const { i18n } = useTranslation()\n\n    switch (fieldType) {\n        case \"TEXT\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"text\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                    size={fieldLen}\n                    maxLength={fieldLen}\n                />\n            )\n        case \"CYRILLIC\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"text\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                    size={fieldLen}\n                    maxLength={fieldLen}\n                />\n            )\n        case \"INTEGER\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"number\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                    size={fieldLen}\n                    maxLength={fieldLen}\n                />\n            )\n        case \"NUMERIC\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"number\"\n                    step=\"0.01\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                    size={fieldLen}\n                    maxLength={fieldLen}\n                />\n            )\n        case \"DICT\":\n            const dic = dictionaries.find((item: IDict) => item.id === fieldDict)\n            return (\n                <CustomSelect\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                >\n                    <option>-</option>\n                    {['create', 'edit', 'search', 'find'].includes(String(state))\n                        ? dic?.data_edit.map((item: any) => (\n                            <option key={item.id} value={item.id}>{item[`title_${i18n.language}` as keyof typeof item]}</option>\n                        ))\n                        : dic?.data_browse.map((item: any) => (\n                            <option key={item.id} value={item.id}>{item[`title_${i18n.language}` as keyof typeof item]}</option>\n                        ))}\n                </CustomSelect>\n            )\n        case \"DATE\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"date\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                    size={fieldLen}\n                    maxLength={fieldLen}\n                />\n            )\n        case \"TIME\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"time\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                    size={fieldLen}\n                    maxLength={fieldLen}\n                />\n            )\n        case \"FILE\":\n            return (\n                <CustomInput\n                    className={cls}\n                    id={fieldName}\n                    title={fieldTitle}\n                    type=\"file\"\n                    name={fieldName}\n                    defaultValue={val}\n                    required={fieldRequired}\n                    disabled={fieldDisabled}\n                />\n            )\n    }\n}", "import { InputField } from \"@prisma/client\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport Field from \"./field\"\nimport { useTranslation } from \"react-i18next\"\n\ntype SingleGroupProps = {\n    state: string | null,\n    dictionaries: any,\n    group: any,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n}\nexport default function SingleGroup({ state, dictionaries, group, doc, setDoc }: SingleGroupProps) {\n    const { i18n } = useTranslation()\n\n    return (\n        <div className=\"border p-1 grid grid-cols-3 gap-1\">\n            {group?.fields && group.fields.map((fld: InputField) => {\n                let cls = `col-span-${fld.colSpan} col-start-${fld.colStart}`\n                let fieldName = `f${fld.id}`\n                let fieldTitle = fld[`title_${i18n.language}` as keyof typeof fld] as string\n                let fieldLen = fld.len ? fld.len : 30\n                let fieldRequired = fld.isRequire && state === 'edit'\n                let fieldDisabled = !fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))\n                let tableName = `tbl_${fld.groupId}`\n                let val = ''\n                if (doc[tableName].length) {\n                    val = doc[tableName][0][fieldName]\n                }\n\n                return (\n                    <Field\n                        key={fld.id}\n                        cls={cls}\n                        state={state}\n                        dictionaries={dictionaries}\n                        fieldName={`${tableName}__${fieldName}__0`}\n                        fieldType={fld.fieldType}\n                        fieldTitle={fieldTitle}\n                        fieldLen={fieldLen}\n                        fieldRequired={fieldRequired}\n                        fieldDisabled={fieldDisabled}\n                        fieldDict={fld.dicId}\n                        val={val}\n                    />\n                )\n            })}\n        </div>\n    )\n}", "import { Group, InputField } from \"@prisma/client\"\nimport { Dispatch, MouseEvent, SetStateAction } from \"react\"\nimport CustomButton from \"~/components/UI/elements/custom_button\"\nimport { useTranslation } from \"react-i18next\"\nimport { useNavigate } from \"@remix-run/react\"\nimport { IDict, IDictVal } from \"~/types/types\"\n\ntype MultyGroupProps = {\n    state: string | null,\n    dictionaries: any,\n    group: Group & { fields: InputField[] } | null,\n    setGroup: Dispatch<SetStateAction<Group & { fields: InputField[] } | null>>,\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n    setRecordIndex: Dispatch<SetStateAction<number>>,\n}\nexport default function MultyGroup({\n    state,\n    dictionaries,\n    group,\n    setGroup,\n    doc,\n    setDoc,\n    setRecordIndex\n}: MultyGroupProps) {\n    const { i18n, t } = useTranslation()\n    const handleCreate = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        setRecordIndex(-1)\n        setGroup(group)\n    }\n    const handleDelete = (e: MouseEvent<HTMLButtonElement>, recordIndex: number) => {\n        e.preventDefault()\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (response) {\n            let d = { ...doc }\n            const tbl = `tbl_${group?.id}`\n            d[tbl].splice([recordIndex], 1)\n            setDoc(d)\n        }\n    }\n    const handleEdit = (e: MouseEvent<HTMLButtonElement>, recordIndex: number) => {\n        e.preventDefault()\n        setRecordIndex(recordIndex)\n        setGroup(group)\n    }\n\n    return (\n        <div className=\"border p-1 flex flex-col gap-3\">\n            <div className=\"mt-2\">\n                {state === 'create'\n                    ? <CustomButton\n                        className=\"bg-primary hover:shadow-primary_shadow\"\n                        onClick={handleCreate}\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                        </svg>\n                        {t('add')}\n                    </CustomButton>\n                    : null}\n            </div>\n            <table\n                className=\"border border-blue-gray-700\"\n            >\n                <thead\n                    className=\"bg-primary text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\">#</th>\n                        {group?.fields && group.fields.map((fld: InputField) => (\n                            <th key={fld.id} className=\"p-1 text-sm border border-blue-gray-700\">\n                                {fld[`title_${i18n.language}` as keyof typeof fld]}\n                            </th>\n                        ))}\n                        <th className=\"p-1 text-sm border border-blue-gray-700\"></th>\n                        <th className=\"p-1 text-sm border border-blue-gray-700\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {doc[`tbl_${group?.id}`].map((record: any, index: number) => (\n                        <tr key={index} >\n                            <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                            {group?.fields && group.fields.map((fld: InputField) => {\n                                let val = doc[`tbl_${group.id}`][index][`f${fld.id}`]\n                                if (fld.fieldType === 'DICT') {\n                                    let dic = dictionaries.find((item: IDict) => item.id === fld.dicId)\n                                    if (dic) {\n                                        let dicVal = dic.data_browse.find((item: IDictVal) => item.id === Number(val))\n                                        if (dicVal) {\n                                            val = dicVal[`title_${i18n.language}` as keyof typeof dicVal]\n                                        }\n                                    }\n                                } else if (fld.fieldType === 'FILE') {\n                                    val = ''\n                                }\n                                return (\n                                    <th key={fld.id} className=\"p-1 text-sm border border-blue-gray-700\">\n                                        {val}\n                                    </th>\n                                )\n                            })}\n                            {[\"edit\", \"create\"].includes(String(state))\n                                ? <td className=\"p-1 text-sm border border-blue-gray-700 w-10\">\n                                    <CustomButton\n                                        className=\"bg-primary hover:shadow-primary_shadow\"\n                                        onClick={(e) => handleEdit(e, index)}\n                                    >\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125\" />\n                                        </svg>\n                                    </CustomButton>\n                                </td>\n                                : null}\n                            {[\"edit\", \"create\"].includes(String(state))\n                                ? <td className=\"p-1 text-sm border border-blue-gray-700 w-10\">\n                                    <CustomButton\n                                        className=\"bg-danger hover:shadow-danger_shadow\"\n                                        onClick={(e) => handleDelete(e, index)}\n                                    >\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                                        </svg>\n                                    </CustomButton>\n                                </td>\n                                : null}\n                        </tr>\n                    ))}\n\n                </tbody>\n            </table>\n        </div>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\";\nconst { Dialog, Card, CardBody, CardFooter } = MaterialTailwind;\nimport { Group, InputField } from \"@prisma/client\";\nimport { Dispatch, FormEvent, MouseEvent, SetStateAction } from \"react\";\nimport { IDict } from \"~/types/types\";\nimport Field from \"./edit_form/field\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\n\ntype DialogMultyGroupProps = {\n    state: string | null,\n    group: Group & { fields: InputField[] } | null,\n    setGroup: Dispatch<SetStateAction<Group & { fields: InputField[] } | null>>,\n    dictionaries: IDict[],\n    doc: any,\n    setDoc: Dispatch<SetStateAction<any>>,\n    recordIndex: number\n}\n\nexport default function DialogMultyGroup({\n    state,\n    group,\n    setGroup,\n    dictionaries,\n    doc,\n    setDoc,\n    recordIndex\n}: DialogMultyGroupProps) {\n    const { i18n, t } = useTranslation()\n    const handleClose = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault()\n        setGroup(null)\n    }\n    const handleSave = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (group) {\n            let formData = new FormData(e.currentTarget)\n            let values = Object.fromEntries(formData)\n            let d = { ...doc }\n            if (recordIndex >= 0) {\n                d[`tbl_${group.id}`][recordIndex] = { ...values }\n            } else {\n                d[`tbl_${group.id}`].push({ ...values })\n            }\n            setDoc(d)\n            setGroup(null)\n            console.log(doc)\n        }\n    }\n\n    return (\n        <Dialog\n            placeholder=\"\"\n            size=\"lg\"\n            open={group ? true : false}\n            handler={() => setGroup(null)}\n            className=\"bg-transparent shadow-none\"\n        >\n            <Card className=\"mx-auto w-full\" placeholder=\"\">\n                <CardBody className=\"flex flex-col gap-4 overflow-auto\" placeholder=\"\">\n                    <form\n                        id=\"groupForm\"\n                        method=\"post\"\n                        onSubmit={handleSave}\n                    >\n                        {group?.fields ? group.fields.map((fld: InputField) => {\n                            let cls = `col-span-${fld.colSpan} col-start-${fld.colStart}`\n                            let fieldName = `f${fld.id}`\n                            let fieldTitle = fld[`title_${i18n.language}` as keyof typeof fld] as string\n                            let fieldLen = fld.len ? fld.len : 30\n                            let fieldRequired = fld.isRequire && state === 'edit'\n                            let fieldDisabled = !fld.isEnable || !(['create', 'edit', 'search', 'find'].includes(String(state)))\n                            let tableName = `tbl_${fld.groupId}`\n                            let val = ''\n                            if (recordIndex >= 0 && doc[tableName].length) {\n                                val = doc[tableName][recordIndex][fieldName]\n                            }\n                            if (fld.fieldType === 'FILE') {\n                                val = ''\n                            }\n\n                            return (\n                                <Field\n                                    key={fld.id}\n                                    cls={cls}\n                                    state={state}\n                                    dictionaries={dictionaries}\n                                    fieldName={fieldName}\n                                    fieldType={fld.fieldType}\n                                    fieldTitle={fieldTitle}\n                                    fieldLen={fieldLen}\n                                    fieldRequired={fieldRequired}\n                                    fieldDisabled={fieldDisabled}\n                                    fieldDict={fld.dicId}\n                                    val={val}\n                                />\n                            )\n                        }) : <>-</>}\n                    </form>\n                </CardBody>\n                <CardFooter className=\"pt-0 flex flex-row gap-3 justify-center\" placeholder=\"\">\n                    <CustomButton\n                        className=\"bg-primary hover:shadow-primary_shadow\"\n                        form=\"groupForm\"\n                        type=\"submit\"\n                    >\n                        {t('save')}\n                    </CustomButton>\n                    <CustomButton\n                        className=\"bg-primary hover:shadow-primary_shadow\"\n                        onClick={handleClose}\n                    >\n                        {t('close')}\n                    </CustomButton>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}", "import { Dictionary, Prisma } from \"@prisma/client\";\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useOutletContext } from \"@remix-run/react\";\nimport DictionariesView from \"~/components/UI/widgets/dictionaries/view\";\nimport api from \"~/components/api\";\nimport { ContexType } from \"~/types/types\";\n\nexport async function loader({\n    request,\n}: LoaderFunctionArgs) {\n    const url = new URL(request.url)\n    const currentDicId = url.searchParams.get(\"current_dic\")\n    let dictionary = {}\n    let dictValues = []\n    if (currentDicId) {\n        dictionary = await api.db.getDictionary(Number(currentDicId))\n        dictValues = await api.db.getDictValues(Number(currentDicId))\n    }\n\n    return json({ dictionary, dictValues })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let errors: string | null = null\n    const formData = await request.formData()\n    const { _action, ...values } = Object.fromEntries(formData)\n    switch (_action) {\n        case 'addDictVal': {\n            try {\n                const dictId = Number(values.dictId)\n                const createDictVal = {\n                    title_kk: 'Dict Value',\n                    title_ru: 'Dict Value',\n                    is_enabled: true\n                }\n                await api.db.updateDictValue(dictId, createDictVal)\n                return redirect(`/dashboard/dictionaries?current_dic=${dictId}`)\n            } catch (e) {\n                if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                    errors = e.message\n                }\n            }\n            break\n        }\n        case 'updateDictVal': {\n            try {\n                const dictId = Number(values.dictId)\n                const updateDictVal = {\n                    id: Number(values.id),\n                    title_kk: String(values.title_kk),\n                    title_ru: String(values.title_ru),\n                    is_enabled: Boolean(values.is_enabled)\n                }\n                await api.db.updateDictValue(dictId, updateDictVal)\n                return redirect(`/dashboard/dictionaries?current_dic=${dictId}`)\n            } catch (e) {\n                if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                    errors = e.message\n                }\n            }\n            break\n        }\n        case 'deleteDictVal': {\n            try {\n                const dictId = Number(values.dictId)\n                await api.db.deleteDictValue(dictId, Number(values.id))\n                return redirect(`/dashboard/dictionaries?current_dic=${dictId}`)\n            } catch (e) {\n                if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                    errors = e.message\n                }\n            }\n            break\n        }\n    }\n    return json({ errors })\n}\n\nexport default function Dictionaries() {\n    const { dictionaries } = useOutletContext<ContexType>()\n    const { dictionary, dictValues } = useLoaderData<typeof loader>()\n    const data = useActionData<typeof action>()\n\n    return (\n        <DictionariesView\n            errors={data?.errors ? data?.errors : undefined}\n            dictionaries={dictionaries}\n            dictionary={dictionary as Dictionary}\n            dictValues={dictValues}\n        />\n    )\n}", "import { Dictionary } from \"@prisma/client\";\nimport { Form } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\n\ntype ButtonAddDictValueProps = {\n    dictionary: Dictionary\n}\n\nexport default function ButtonAddDictValue({ dictionary }: ButtonAddDictValueProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"addDictVal\"\n            >\n                <input type=\"hidden\" name=\"dictId\" value={dictionary.id} />\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { Dictionary } from \"@prisma/client\";\nimport ButtonAddDictValue from \"./btn_add_value\";\nimport ButtonDeleteDictValue from \"./btn_delete_value\";\n\ntype ButtonsProps = {\n    dictionary: Dictionary\n}\n\nexport default function Buttons({ dictionary }: ButtonsProps) {\n    return (\n        <div className=\"mb-2 flex justify-end items-center py-2 px-2 border\">\n            <ButtonAddDictValue dictionary={dictionary} />\n        </div>\n    )\n}", "import { Dictionary } from \"@prisma/client\"\nimport { useNavigate } from \"@remix-run/react\"\nimport { useTranslation } from \"react-i18next\"\n\ntype DictionariesTableProps = {\n    dictionaries: Dictionary[],\n    dictionary: Dictionary,\n}\n\nexport default function DictionariesTable({\n    dictionaries,\n    dictionary\n}: DictionariesTableProps) {\n    const { i18n, t } = useTranslation()\n    const navigate = useNavigate()\n\n    return (\n        <table\n            className=\"w-full\"\n        >\n            <thead\n                className=\"bg-primary text-white text-center\"\n            >\n                <tr>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('title')}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {dictionaries && dictionaries.map((dic: Dictionary, index: number) => (\n                    <tr\n                        key={dic.id}\n                        className={dic?.id === dictionary.id ? \"bg-selected hover:cursor-pointer\" : \" hover:cursor-pointer\"}\n                        onClick={() => navigate(`/dashboard/dictionaries?current_dic=${dic.id}`)}\n                    >\n                        <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{index + 1}</td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\">\n                            {dic[`title_${i18n.language}` as keyof typeof dic]}\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n}", "import { Dictionary } from \"@prisma/client\"\nimport { Form } from \"@remix-run/react\"\nimport { useTranslation } from \"react-i18next\"\nimport { IDict, IDictVal } from \"~/types/types\"\nimport ButtonDeleteDictValue from \"./buttons/btn_delete_value\"\n\ntype DicValuesTableProps = {\n    dictionary: Dictionary,\n    dictValues: IDictVal[],\n}\nexport default function DicValuesTable({\n    dictionary,\n    dictValues\n}: DicValuesTableProps) {\n    const { t } = useTranslation()\n\n    return (\n        <div>\n            {dictValues && dictValues.map((item) => (\n                <Form\n                    key={item.id}\n                    method=\"post\"\n                    className=\"hidden\"\n                    id={`updateDictValForm_${item.id}`}\n                >\n                    <input type=\"hidden\" name=\"dictId\" defaultValue={dictionary.id} />\n                    <input type=\"hidden\" name=\"id\" defaultValue={item.id} />\n                    <input\n                        id={`updateDictValButton_${item.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateDictVal\"\n                    />\n                </Form>\n            ))}\n            <table\n                className=\"w-full\"\n            >\n                <thead\n                    className=\"bg-primary text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">ID</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('title_kk')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('title_ru')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('is_enable')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {dictValues && dictValues.map((item) => (\n                        <tr key={item.id} >\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{item.id}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500\">\n                                <input\n                                    className=\"text-sm w-full focus:outline-none p-1 text-black\"\n                                    form={`updateDictValForm_${item.id}`}\n                                    type=\"text\"\n                                    name=\"title_kk\"\n                                    defaultValue={item.title_kk}\n                                    maxLength={45}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateDictValButton_${item.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                />\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500\">\n                                <input\n                                    className=\"text-sm w-full focus:outline-none p-1 text-black\"\n                                    form={`updateDictValForm_${item.id}`}\n                                    type=\"text\"\n                                    name=\"title_ru\"\n                                    defaultValue={item.title_ru}\n                                    maxLength={45}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateDictValButton_${item.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                />\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500\">\n                                <input\n                                    className=\"text-sm w-full focus:outline-none p-1 text-black\"\n                                    form={`updateDictValForm_${item.id}`}\n                                    type=\"checkbox\"\n                                    name=\"is_enabled\"\n                                    defaultChecked={item.is_enabled}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateDictValButton_${item.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                />\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                                {item.id && <ButtonDeleteDictValue dictId={dictionary.id} id={item.id} />}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\n\ntype ButtonDeleteDictValueProps = {\n    dictId: number,\n    id: number\n}\n\nexport default function ButtonDeleteDictValue({ dictId, id }: ButtonDeleteDictValueProps) {\n    const { t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"id\" defaultValue={id} />\n            <input type=\"hidden\" name=\"dictId\" defaultValue={dictId} />\n            <CustomButton\n                className=\"bg-danger hover:shadow-danger_shadow\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteDictVal\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                </svg>\n            </CustomButton>\n        </Form>\n    )\n}", "import { Dictionary } from \"@prisma/client\"\nimport ErrorMessage from \"../../elements/error_message\"\nimport Panel from \"../../elements/panel\"\nimport Buttons from \"./buttons/buttons\"\nimport DictionariesTable from \"./tbl_dictionaries\"\nimport DicValuesTable from \"./tbl_dic_values\"\nimport { IDictVal } from \"~/types/types\"\n\ntype DictionariesViewProps = {\n    errors?: string,\n    dictionaries: any,\n    dictionary: Dictionary,\n    dictValues: IDictVal[],\n}\n\nexport default function DictionariesView({\n    errors,\n    dictionaries,\n    dictionary,\n    dictValues,\n}: DictionariesViewProps) {\n    return (\n        <div className=\"mx-1 flex flex-col gap-3 h-[calc(100vh-5rem)]\">\n            <ErrorMessage errors={errors} />\n            <Panel className=\"h-full overflow-auto\">\n                <Buttons dictionary={dictionary} />\n                <div className=\"flex flex-row gap-10\">\n                    <div className=\"w-1/3\">\n                        <DictionariesTable\n                            dictionaries={dictionaries}\n                            dictionary={dictionary}\n                        />\n                    </div>\n                    <div className=\"w-2/3\">\n                        <DicValuesTable\n                            dictionary={dictionary}\n                            dictValues={dictValues}\n                        />\n                    </div>\n                </div>\n            </Panel>\n        </div>\n    )\n}", "import { InputForm, SearchForm, InputField, FieldType, Prisma } from \"@prisma/client\";\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useOutletContext } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\nimport api from \"~/components/api\";\nimport DbStructView from \"~/components/UI/widgets/db_struct/view\";\nimport { ContexType } from \"~/types/types\";\n\nexport async function loader({\n    request,\n}: LoaderFunctionArgs) {\n    const url = new URL(request.url)\n    const state = url.searchParams.get(\"state\")\n    const inputFormId = url.searchParams.get(\"inputFormId\")\n    const searchFormId = url.searchParams.get(\"searchFormId\")\n    const dictionaryId = url.searchParams.get(\"dictionaryId\")\n    const groupId = url.searchParams.get(\"groupId\")\n    const inputFieldId = url.searchParams.get(\"inputFieldId\")\n    const groups = await api.db.getGroups(Number(inputFormId))\n    const inputFields = await api.db.getInputFields()\n    let inputForm, searchForm, dictionary, group, inputField\n    switch (state) {\n        case 'dictionary': {\n            invariant(dictionaryId, \"Missing dictionaryId param\")\n            dictionary = await api.db.getDictionary(Number(dictionaryId))\n            break\n        }\n        case 'inputForm': {\n            invariant(inputFormId, \"Missing inputFormId param\")\n            inputForm = await api.db.getInputForm(Number(inputFormId))\n            break\n        }\n        case 'searchForm': {\n            invariant(searchFormId, \"Missing searchFormId param\")\n            searchForm = await api.db.getSearchForm(Number(searchFormId))\n            break\n        }\n        case 'group': {\n            invariant(groupId, \"Missing groupId param\")\n            group = await api.db.getGroup(Number(groupId))\n            inputField = group?.fields.find((item: InputField) => { item.id === Number(inputFieldId) })\n            break\n        }\n    }\n    return json({\n        state,\n        dictionary,\n        inputForm,\n        searchForm,\n        group,\n        inputField,\n        groups,\n        inputFields,\n    })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let errors: string | null = null\n    const formData = await request.formData()\n    const { _action, ...values } = Object.fromEntries(formData)\n    if (_action === 'updateInputForm') {\n        try {\n            await api.db.updateInputForm(Number(values.id), {\n                id: Number(values.id),\n                pos: Number(values.pos),\n                title_kk: String(values.title_kk),\n                title_ru: String(values.title_ru),\n            } as InputForm)\n            return redirect(`/dashboard/db_struct?state=inputForm&inputFormId=${values.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyInputForm') {\n        try {\n            const form = await api.db.createEmptyInputForm(Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=inputForm&inputFormId=${form.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteInputForm') {\n        try {\n            await api.db.deleteInputForm(Number(values.id))\n            return redirect(`/dashboard/db_struct`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateSearchForm') {\n        try {\n            await api.db.updateSearchForm(Number(values.id), {\n                id: Number(values.id),\n                pos: Number(values.pos),\n                title_kk: String(values.title_kk),\n                title_ru: String(values.title_ru),\n            } as SearchForm)\n            return redirect(`/dashboard/db_struct?state=searchForm&searchFormId=${values.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptySearchForm') {\n        try {\n            const form = await api.db.createEmptySearchForm(Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=searchForm&searchFormId=${form.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteSearchForm') {\n        try {\n            await api.db.deleteSearchForm(Number(values.id))\n            return redirect(`/dashboard/db_struct`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateDictionary') {\n        try {\n            await api.db.updateDictionary(Number(values.id), {\n                id: Number(values.id),\n                title_kk: String(values.title_kk),\n                title_ru: String(values.title_ru),\n            })\n            return redirect(`/dashboard/db_struct?state=dictionary&dictionaryId=${values.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyDictionary') {\n        try {\n            const dict = await api.db.createEmptyDictionary(Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=dictionary&dictionaryId=${dict.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteDictionary') {\n        try {\n            await api.db.deleteDictionary(Number(values.id))\n            return redirect(`/dashboard/db_struct`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyGroup') {\n        try {\n            const group = await api.db.createEmptyGroup(Number(values.inputFormId), Number(values.cnt))\n            return redirect(`/dashboard/db_struct?state=group&groupId=${group.id}&inputFormId=${group.inputFormId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateGroup') {\n        try {\n            const group = await api.db.updateGroup(Number(values.id),\n                {\n                    id: Number(values.id),\n                    inputFormId: Number(values.inputFormId),\n                    pos: Number(values.pos),\n                    title_kk: String(values.title_kk),\n                    title_ru: String(values.title_ru),\n                    isMulty: Boolean(values.isMulty),\n                },\n            )\n            return redirect(`/dashboard/db_struct?state=group&inputFormId=${group.inputFormId}&groupId=${group.id}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteGroup') {\n        try {\n            await api.db.deleteGroup(Number(values.id))\n            return redirect('/dashboard/db_struct')\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateInputField') {\n        try {\n            await api.db.updateInputField(Number(values.id), {\n                id: Number(values.id),\n                groupId: Number(values.groupId),\n                colSpan: Number(values.colSpan),\n                colStart: Number(values.colStart),\n                pos: Number(values.pos),\n                title_kk: String(values.title_kk),\n                title_ru: String(values.title_ru),\n                len: Number(values.len),\n                fieldType: String(values.fieldType) as FieldType,\n                dicId: Number(values.dicId),\n                isKey: Boolean(values.isKey),\n                isVisible: Boolean(values.isVisible),\n                isEnable: Boolean(values.isEnable),\n                isRequire: Boolean(values.isRequire),\n                precision: Number(values.precision),\n                isDuplicate: Boolean(values.isDuplicate),\n            })\n            return redirect(`/dashboard/db_struct?state=group&inputFormId=${values.inputFormId}&groupId=${values.groupId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyInputField') {\n        try {\n            await api.db.createEmptyInputField(Number(values.groupId), Number(values.cnt))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteInputField') {\n        try {\n            await api.db.deleteInputField(Number(values.id))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptySearchField') {\n        try {\n            await api.db.createEmptySearchField(Number(values.searchFormId), Number(values.cnt))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateSearchField') {\n        try {\n            await api.db.updateSearchField(Number(values.id), {\n                id: Number(values.id),\n                pos: Number(values.pos),\n                searchFormId: Number(values.searchFormId),\n                title_kk: String(values.title_kk),\n                title_ru: String(values.title_ru),\n                fieldId: Number(values.fieldId),\n            })\n            return redirect(`/dashboard/db_struct?state=searchForm&searchFormId=${values.searchFormId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteSearchField') {\n        try {\n            await api.db.deleteSearchField(Number(values.id))\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'generateStructDb') {\n        try {\n            await api.db.generateStructDb()\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    return json({ errors })\n}\n\nexport default function DbStruct() {\n    const { dictionaries, inputForms, searchForms } = useOutletContext<ContexType>()\n    const {\n        state,\n        dictionary,\n        inputForm,\n        searchForm,\n        group,\n        groups,\n        inputFields\n    } = useLoaderData<typeof loader>()\n\n    const data = useActionData<typeof action>()\n\n    return (\n        <DbStructView\n            errors={data?.errors ? data?.errors : undefined}\n            state={state}\n            inputForms={inputForms}\n            searchForms={searchForms}\n            dictionaries={dictionaries}\n            groups={groups}\n            inputFormId={inputForm?.id}\n            searchFormId={searchForm?.id}\n            dictionaryId={dictionary?.id}\n            groupId={group?.id}\n            inputForm={inputForm}\n            searchForm={searchForm}\n            dictionary={dictionary}\n            group={group}\n            inputFields={inputFields}\n        />\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddDicionaryProps = {\n    count: number,\n}\n\nexport default function ButtonAddDicionary({ count }: ButtonAddDicionaryProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"cnt\" defaultValue={count + 1} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptyDictionary\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add_dictionary')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddInputFormProps = {\n    count: number,\n}\n\nexport default function ButtonAddInputForm({ count }: ButtonAddInputFormProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"cnt\" defaultValue={count + 1} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptyInputForm\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add_inputform')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddSearchFormProps = {\n    count: any,\n}\n\nexport default function ButtonAddSearchForm({ count }: ButtonAddSearchFormProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"cnt\" defaultValue={count + 1} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptySearchForm\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add_searchform')}\n            </CustomButton>\n        </Form>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\";\nconst { Spinner } = MaterialTailwind;\nimport { Form, useFetcher } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\n\nexport default function ButtonRestructDb() {\n    const { t } = useTranslation()\n    const fetcher = useFetcher()\n    const isRestruct = fetcher.state !== \"idle\"\n    const handleRestruct = async (event: any) => {\n        const response = confirm(\n            \"Please confirm you want to restructure database.\"\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"generateStructDb\"\n                disabled={isRestruct}\n                onClick={handleRestruct}\n            >\n                {isRestruct\n                    ? <>\n                        <Spinner className=\"w-4 h-4\" />\n                        {t('restruct_db')} ...\n                    </>\n                    : <>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 6.375c0 2.278-3.694 4.125-8.25 4.125S3.75 8.653 3.75 6.375m16.5 0c0-2.278-3.694-4.125-8.25-4.125S3.75 4.097 3.75 6.375m16.5 0v11.25c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125V6.375m16.5 0v3.75m-16.5-3.75v3.75m16.5 0v3.75C20.25 16.153 16.556 18 12 18s-8.25-1.847-8.25-4.125v-3.75m16.5 0c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125\" />\n                        </svg>\n                        {t('restruct_db')}\n                    </>}\n            </CustomButton>\n        </Form>\n    )\n}", "import ButtonAddDicionary from \"./btn_add_dictionary\";\nimport ButtonAddInputForm from \"./btn_add_inputform\";\nimport ButtonAddSearchForm from \"./btn_add_searchform\";\nimport ButtonRestructDb from \"./btn_restruct_db\";\n\ntype ButtonsProps = {\n    state: string | null,\n    dictionaries_count: number,\n    inputForms_count: number,\n    searchForms_count: number\n}\n\nexport default function Buttons({\n    state,\n    dictionaries_count,\n    inputForms_count,\n    searchForms_count\n}: ButtonsProps) {\n    return (\n        <div className=\"mb-2 flex justify-between py-2 px-2 border\">\n            <div className=\"flex items-center gap-3\">\n                {state === 'dictionary'\n                    ? <ButtonAddDicionary count={dictionaries_count} />\n                    : state === 'inputForm'\n                        ? <ButtonAddInputForm count={inputForms_count} />\n                        : state === 'searchForm'\n                            ? <ButtonAddSearchForm count={searchForms_count} />\n                            : null}\n            </div>\n            <ButtonRestructDb />\n        </div>\n    )\n}", "import { Dictionary, Group, InputForm, SearchForm } from \"@prisma/client\";\nimport { Link } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\n\ntype DbStructNavProps = {\n    state: string | null,\n    inputForms: any,\n    searchForms: any,\n    dictionaries: any,\n    groups: any,\n    inputFormId: number | undefined,\n    searchFormId: number | undefined,\n    dictionaryId: number | undefined,\n    groupId: number | undefined,\n}\nexport default function DbStructNav({\n    state,\n    inputForms,\n    searchForms,\n    dictionaries,\n    inputFormId,\n    searchFormId,\n    dictionaryId,\n    groupId,\n}: DbStructNavProps) {\n    const { i18n, t } = useTranslation()\n\n    return (\n        <div className=\"p-4 mr-5 w-1/4 border\">\n            <ul>\n                <li\n                    className={[\"flex items-center gap-1 font-bold\",\n                        state === 'inputForm' && !inputFormId ? \"bg-selected\" : \"\"].join(' ')}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n                    </svg>\n                    <Link\n                        to={`/dashboard/db_struct?state=inputForm&inputFormId=0`}\n                    >\n                        {t('inputforms')}\n                    </Link>\n                </li>\n                <ul>\n                    {inputForms.map((form: InputForm & { groups: Group[] }) => {\n                        let formTitle = `${form.pos}. ${form[`title_${i18n.language}` as keyof typeof form]}`\n                        return (\n                            <div key={form.id}>\n                                <Link\n                                    to={`/dashboard/db_struct?state=inputForm&inputFormId=${form.id}`}\n                                >\n                                    <li\n                                        className={[\"pl-4 flex items-center gap-1 hover:cursor-pointer\",\n                                            state === 'inputForm' && form.id === inputFormId ? \"bg-selected\" : \"\"].join(' ')}\n                                    >\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                                        </svg>\n                                        {formTitle}\n                                    </li>\n                                </Link>\n                                <ul>\n                                    {form.groups.map((gr: Group) => {\n                                        let groupTitle = `${gr.pos}. ${gr[`title_${i18n.language}` as keyof typeof gr]}`\n                                        return (\n                                            <Link\n                                                key={gr.id}\n                                                to={`/dashboard/db_struct?state=group&inputFormId=${gr.inputFormId}&groupId=${gr.id}`}\n                                            >\n                                                <li\n                                                    className={[\"pl-8 flex items-center gap-1 hover:cursor-pointer\",\n                                                        state === 'group' && gr.id === groupId ? \"bg-selected\" : \"\"].join(' ')}\n                                                >\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                                                    </svg>\n                                                    {groupTitle}\n                                                </li>\n                                            </Link>\n                                        )\n                                    })}\n                                </ul>\n                            </div>\n                        )\n                    })}\n                </ul>\n                <li\n                    className={[\"flex items-center gap-1 font-bold\",\n                        state === 'searchForm' && !searchFormId ? \"bg-selected\" : \"\"].join(' ')}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n                    </svg>\n                    <Link\n                        to={`/dashboard/db_struct?state=searchForm&searchFormId=0`}\n                    >\n                        {t('searchforms')}\n                    </Link>\n                </li>\n                <ul>\n                    {searchForms.map((form: SearchForm) => {\n                        let formTitle = `${form.pos}. ${form[`title_${i18n.language}` as keyof typeof form]}`\n                        return (\n                            <Link\n                                key={form.id}\n                                to={`/dashboard/db_struct?state=searchForm&searchFormId=${form.id}`}\n                            >\n                                <li\n                                    className={[\"pl-4 flex items-center gap-1 hover:cursor-pointer\",\n                                        state === 'searchForm' && form.id === searchFormId ? \"bg-selected\" : \"\"].join(' ')}\n                                >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                                    </svg>\n                                    {formTitle}\n                                </li>\n                            </Link>\n                        )\n                    })}\n                </ul>\n                <li\n                    className={[\"flex items-center gap-1 font-bold\",\n                        state === 'dictionary' && !dictionaryId ? \"bg-selected\" : \"\"].join(' ')}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\" />\n                    </svg>\n                    <Link\n                        to={`/dashboard/db_struct?state=dictionary&dictionaryId=0`}\n                    >\n                        {t('dictionaries')}\n                    </Link>\n                </li>\n                <ul>\n                    {dictionaries.map((dict: Dictionary) => {\n                        let dicTitle = dict[`title_${i18n.language}` as keyof typeof dict]\n                        return (\n                            <Link\n                                key={dict.id}\n                                to={`/dashboard/db_struct?state=dictionary&dictionaryId=${dict.id}`}\n                            >\n                                <li\n                                    className={[\"pl-4 flex items-center gap-1 hover:cursor-pointer\",\n                                        state === 'dictionary' && dict.id === dictionaryId ? \"bg-selected\" : \"\"].join(' ')}\n                                >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                                    </svg>\n                                    {dicTitle}\n                                </li>\n                            </Link>\n                        )\n                    })}\n                </ul>\n            </ul>\n        </div>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport CustomInput from \"~/components/UI/elements/custom_input\";\nimport { useTranslation } from \"react-i18next\";\n\ntype DictionaryFormProps = {\n    dictionary: any\n}\n\nexport default function DictionaryForm({ dictionary }: DictionaryFormProps) {\n    const { i18n, t } = useTranslation()\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateDictionaryButton\"\n                    form=\"updateDictionary\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateDictionary\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    {t('save')}\n                </CustomButton>\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"id\" defaultValue={dictionary.id ? dictionary.id : ''} />\n                    <CustomButton\n                        className=\"bg-red-500 hover:shadow-red-100\"\n                        onClick={handleDelete}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"deleteDictionary\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                        </svg>\n                        {t('delete')}\n                    </CustomButton>\n                </Form>\n            </div>\n            <Form\n                id=\"updateDictionary\"\n                key={dictionary?.id}\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={dictionary.id ? dictionary.id : ''} />\n                <CustomInput\n                    id={dictionary.id}\n                    title={t('title_kk')}\n                    type=\"text\"\n                    defaultValue={dictionary?.title_kk}\n                    name=\"title_kk\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateDictionaryButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n                <CustomInput\n                    id={dictionary.id}\n                    title={t('title_ru')}\n                    type=\"text\"\n                    defaultValue={dictionary?.title_ru}\n                    name=\"title_ru\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateDictionaryButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n            </Form >\n        </>\n    )\n}", "import { Form, useNavigate } from \"@remix-run/react\";\nimport { InputField, FieldType, Dictionary } from \"@prisma/client\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport CustomInput from \"~/components/UI/elements/custom_input\";\nimport { useTranslation } from \"react-i18next\";\n\ntype GroupFormProps = {\n    group: any,\n    dicts: any,\n}\n\nexport default function GroupForm({ group, dicts }: GroupFormProps) {\n    const { i18n, t } = useTranslation()\n    const navigate = useNavigate()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"bg-primary hover:shadow-primary_shadow\"\n                    form=\"addInputFieldForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"createEmptyInputField\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    {t('add_field')}\n                </CustomButton>\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateGroupButton\"\n                    color=\"green\"\n                    form=\"updateGroupForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateGroup\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    {t('save')}\n                </CustomButton>\n                <CustomButton\n                    className=\"bg-danger hover:shadow-danger_shadow\"\n                    form=\"deleteGroupForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"deleteGroup\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                    </svg>\n                    {t('delete')}\n                </CustomButton>\n            </div>\n            <Form\n                id=\"addInputFieldForm\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={group.inputFormId} />\n                <input type=\"hidden\" name=\"groupId\" defaultValue={group.id} />\n                <input type=\"hidden\" name=\"cnt\" defaultValue={group.fields.length + 1} />\n            </Form>\n            <Form\n                id=\"updateGroupForm\"\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={group.id} />\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={group.inputFormId} />\n\n                <CustomInput\n                    id=\"group_pos\"\n                    type=\"number\"\n                    name=\"pos\"\n                    title={t('pos')}\n                    defaultValue={group?.pos}\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    subClass=\"w-16\"\n                />\n                <CustomInput\n                    id=\"group_title_kk\"\n                    type=\"text\"\n                    name=\"title_kk\"\n                    title={t('title_kk')}\n                    defaultValue={group?.title_kk}\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n                <CustomInput\n                    id=\"group_title_ru\"\n                    type=\"text\"\n                    name=\"title_ru\"\n                    title={t('title_ru')}\n                    defaultValue={group?.title_ru}\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n                <CustomInput\n                    id=\"group_ismulty\"\n                    type=\"checkbox\"\n                    name=\"isMulty\"\n                    title={t('is_multy')}\n                    checked={group?.isMulty ? true : false}\n                    required={false}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateGroupButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                />\n            </Form>\n            {group?.fields && group.fields.map((field: InputField) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateInputFieldForm_${field.id}`}\n                    key={`updateInputFieldForm_${field.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={field.id} />\n                    <input type=\"hidden\" name=\"groupId\" defaultValue={field.groupId} />\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        id={`updateInputFieldButton_${field.id}`}\n                        form={`updateInputFieldForm_${field.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateInputField\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                        </svg>\n                        {t('save')}\n                    </CustomButton>\n                </Form>\n            ))}\n            <div className=\"overflow-x-auto mt-4\">\n                <table className=\"w-full\">\n                    <thead\n                        className=\"bg-primary text-white text-center\"\n                    >\n                        <tr>\n                            <th className=\"p-1 text-sm border\">#</th>\n                            <th className=\"p-1 text-sm border\">ID</th>\n                            <th className=\"p-1 text-sm border\">1</th>\n                            <th className=\"p-1 text-sm border\">2</th>\n                            <th className=\"p-1 text-sm border\">3</th>\n                            <th className=\"p-1 text-sm border\">{t('title_kk')}</th>\n                            <th className=\"p-1 text-sm border\">{t('title_ru')}</th>\n                            <th className=\"p-1 text-sm border\">{t('type_data')}</th>\n                            <th className=\"p-1 text-sm border\">{t('dictionary')}</th>\n                            <th className=\"p-1 text-sm border\">{t('len')}</th>\n                            <th className=\"p-1 text-sm border\">{t('precision')}</th>\n                            <th className=\"p-1 text-sm border\">4</th>\n                            <th className=\"p-1 text-sm border\">5</th>\n                            <th className=\"p-1 text-sm border\">6</th>\n                            <th className=\"p-1 text-sm border\">7</th>\n                            <th className=\"p-1 text-sm border\">8</th>\n                            <th className=\"p-1 text-sm border\"></th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"text-center\">\n                        {group?.fields && group.fields.map((field: InputField, index: number) => (\n                            <tr key={field.id} >\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">F{field.id}</td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"pos\"\n                                        defaultValue={field.pos}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"colSpan\"\n                                        min={1}\n                                        max={3}\n                                        defaultValue={field.colSpan}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"colStart\"\n                                        min={1}\n                                        max={3}\n                                        defaultValue={field.colStart}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td\n                                    className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline w-40\"\n                                >\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"text\"\n                                        name=\"title_kk\"\n                                        defaultValue={field.title_kk}\n                                        maxLength={23}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td\n                                    className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline w-40\"\n                                >\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"text\"\n                                        name=\"title_ru\"\n                                        defaultValue={field.title_ru}\n                                        maxLength={23}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <select\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        name=\"fieldType\"\n                                        defaultValue={field.fieldType}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    >\n                                        {Object.keys(FieldType).map((key) => <option key={key} value={key}>{key}</option>)}\n                                    </select>\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    {field.fieldType === 'DICT'\n                                        ? <select\n                                            className=\"text-sm w-full focus:outline-none\"\n                                            form={`updateInputFieldForm_${field.id}`}\n                                            name=\"dicId\"\n                                            defaultValue={String(field.dicId)}\n                                            onChange={() => {\n                                                const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                                button.click()\n                                            }}\n                                        >\n                                            <option value=\"\">-</option>\n                                            {dicts.map((dic: Dictionary) => <option key={dic.id} value={dic.id}>{dic[`title_${i18n.language}` as keyof typeof dic]}</option>)}\n                                        </select>\n                                        : null}\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"len\"\n                                        defaultValue={field.len}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full focus:outline-none\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"precision\"\n                                        defaultValue={field.precision}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isKey\"\n                                        defaultChecked={field.isKey}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isVisible\"\n                                        defaultChecked={field.isVisible}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isEnable\"\n                                        defaultChecked={field.isEnable}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isRequire\"\n                                        defaultChecked={field.isRequire}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <input\n                                        className=\"text-sm\"\n                                        form={`updateInputFieldForm_${field.id}`}\n                                        type=\"checkbox\"\n                                        name=\"isDuplicate\"\n                                        defaultChecked={field.isDuplicate}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateInputFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer\">\n                                    <Form method=\"post\">\n                                        <input type=\"hidden\" name=\"id\" defaultValue={field?.id ? field.id : ''} />\n                                        <CustomButton\n                                            className=\"bg-danger hover:shadow-danger_shadow\"\n                                            onClick={handleDelete}\n                                            type=\"submit\"\n                                            name=\"_action\"\n                                            value=\"deleteInputField\"\n                                        >\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                                            </svg>\n                                        </CustomButton>\n                                    </Form>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            <Form\n                id=\"deleteGroupForm\"\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        \"Please confirm you want to delete this record.\"\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={group.inputFormId} />\n                <input type=\"hidden\" name=\"id\" defaultValue={group.id} />\n            </Form>\n            <div className=\"pt-5\">\n                <div className=\"text-sm\">1-{t('pos')}</div>\n                <div className=\"text-sm\">2-{t('span')}</div>\n                <div className=\"text-sm\">3-{t('start')}</div>\n                <div className=\"text-sm\">4-{t('is_key')}</div>\n                <div className=\"text-sm\">5-{t('is_visible')}</div>\n                <div className=\"text-sm\">6-{t('is_enable')}</div>\n                <div className=\"text-sm\">7-{t('is_require')}</div>\n                <div className=\"text-sm\">8-{t('duplicate')}</div>\n            </div>\n        </>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport CustomInput from \"~/components/UI/elements/custom_input\";\nimport { useTranslation } from \"react-i18next\";\n\ntype InputFormProps = {\n    inputForm: any,\n    groups: any,\n}\n\nexport default function InputFormForm({ inputForm, groups }: InputFormProps) {\n    const { t } = useTranslation()\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"bg-primary hover:shadow-primary_shadow\"\n                    form=\"addGroupForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"createEmptyGroup\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    {t('add_group')}\n                </CustomButton>\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateInputFormButton\"\n                    form=\"updateInputForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateInputForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    {t('save')}\n                </CustomButton>\n                <CustomButton\n                    className=\"bg-danger hover:shadow-danger_shadow\"\n                    form=\"deleteInputForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"deleteInputForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                    </svg>\n                    {t('delete')}\n                </CustomButton>\n            </div>\n            <Form\n                id=\"addGroupForm\"\n                key={1}\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"inputFormId\" defaultValue={inputForm.id ? inputForm.id : ''} />\n                <input type=\"hidden\" name=\"cnt\" defaultValue={groups.length + 1} />\n            </Form>\n            <Form\n                id=\"updateInputForm\"\n                key={2}\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={inputForm.id ? inputForm.id : ''} />\n                <CustomInput\n                    id=\"inputForm_pos\"\n                    title={t('pos')}\n                    type=\"number\"\n                    defaultValue={inputForm?.pos}\n                    name=\"pos\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateInputFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    subClass=\"w-16\"\n                />\n                <CustomInput\n                    id=\"inputForm_title_kk\"\n                    title={t('title_kk')}\n                    type=\"text\"\n                    defaultValue={inputForm?.title_kk}\n                    name=\"title_kk\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateInputFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n                <CustomInput\n                    id=\"inputForm_title_ru\"\n                    title={t('title_ru')}\n                    type=\"text\"\n                    defaultValue={inputForm?.title_ru}\n                    name=\"title_ru\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateInputFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n            </Form>\n            <Form\n                id=\"deleteInputForm\"\n                key={3}\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        t('confirm_delete')\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={inputForm.id ? inputForm.id : ''} />\n            </Form>\n        </>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport { Group, InputField, InputForm, SearchField } from \"@prisma/client\";\nimport CustomButton from \"~/components/UI/elements/custom_button\";\nimport CustomInput from \"~/components/UI/elements/custom_input\";\nimport { useTranslation } from \"react-i18next\";\n\ntype SearchFormProps = {\n    searchForm: any,\n    inputFields: any,\n}\nexport default function SearchFormForm({ searchForm, inputFields }: SearchFormProps) {\n    const { i18n, t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-row gap-3 justify-end\">\n                <CustomButton\n                    className=\"bg-primary hover:shadow-primary_shadow\"\n                    form=\"addSearchFieldForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"createEmptySearchField\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                    </svg>\n                    {t('add_field')}\n                </CustomButton>\n                <CustomButton\n                    className=\"hidden\"\n                    id=\"updateSearchFormButton\"\n                    form=\"updateSearchForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"updateSearchForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                    </svg>\n                    {t('save')}\n                </CustomButton>\n                <CustomButton\n                    className=\"bg-danger hover:shadow-danger_shadow\"\n                    form=\"deleteSearchForm\"\n                    type=\"submit\"\n                    name=\"_action\"\n                    value=\"deleteSearchForm\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\" />\n                    </svg>\n                    {t('delete')}\n                </CustomButton>\n            </div>\n            <Form\n                id=\"addSearchFieldForm\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"searchFormId\" defaultValue={searchForm.id} />\n                <input type=\"hidden\" name=\"cnt\" defaultValue={searchForm.fields?.length + 1} />\n            </Form>\n            <Form\n                id=\"updateSearchForm\"\n                key={searchForm?.id}\n                className=\"flex flex-col gap-3\"\n                method=\"post\"\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={searchForm.id} />\n                <CustomInput\n                    id=\"searchForm_pos\"\n                    title={t('pos')}\n                    type=\"number\"\n                    value={searchForm?.pos}\n                    name=\"pos\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateSearchFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    subClass=\"w-16\"\n                />\n                <CustomInput\n                    id=\"searchForm_title_kk\"\n                    title={t('title_kk')}\n                    type=\"text\"\n                    value={searchForm?.title_kk}\n                    name=\"title_kk\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateSearchFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n                <CustomInput\n                    id=\"searchForm_title_ru\"\n                    title={t('title_ru')}\n                    type=\"text\"\n                    value={searchForm?.title_ru}\n                    name=\"title_ru\"\n                    required={true}\n                    onChange={() => {\n                        const button = document.getElementById(\"updateSearchFormButton\") as HTMLButtonElement\n                        button.click()\n                    }}\n                    size={100}\n                />\n            </Form>\n            <Form\n                id=\"deleteSearchForm\"\n                method=\"post\"\n                onSubmit={(event) => {\n                    const response = confirm(\n                        t('confirm_delete')\n                    );\n                    if (!response) {\n                        event.preventDefault();\n                    }\n                }}\n            >\n                <input type=\"hidden\" name=\"id\" defaultValue={searchForm.id ? searchForm.id : ''} />\n            </Form>\n            {searchForm?.fields && searchForm.fields.map((field: SearchField) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateSearchFieldForm_${field.id}`}\n                    key={`updateSearchFieldForm_${field.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={field.id} />\n                    <input type=\"hidden\" name=\"searchFormId\" defaultValue={field.searchFormId} />\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        id={`updateSearchFieldButton_${field.id}`}\n                        form={`updateSearchFieldForm_${field.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateSearchField\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m4.5 12.75 6 6 9-13.5\" />\n                        </svg>\n                        {t('save')}\n                    </CustomButton>\n                </Form>\n            ))}\n            <div className=\"overflow-x-auto mt-4\">\n                <table className=\"w-full\">\n                    <thead\n                        className=\"bg-primary text-white text-center\"\n                    >\n                        <tr>\n                            <th className=\"p-1 text-sm border\">#</th>\n                            <th className=\"p-1 text-sm border\">ID</th>\n                            <th className=\"p-1 text-sm border\">{t('pos')}</th>\n                            <th className=\"p-1 text-sm border\">{t('title_kk')}</th>\n                            <th className=\"p-1 text-sm border\">{t('title_ru')}</th>\n                            <th className=\"p-1 text-sm border\">{t('field')}</th>\n                            <th className=\"p-1 text-sm border\"></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {searchForm?.fields && searchForm.fields.map((field: SearchField, index: number) => (\n                            <tr key={field.id} >\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">{index + 1}</td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">F{field.id}</td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-20\">\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        type=\"number\"\n                                        name=\"pos\"\n                                        defaultValue={field.pos}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td\n                                    className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline w-40\"\n                                >\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        type=\"text\"\n                                        name=\"title_kk\"\n                                        defaultValue={field.title_kk}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td\n                                    className=\"p-1 text-sm border border-blue-gray-700 hover:cursor-pointer hover:underline w-40\"\n                                >\n                                    <input\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        type=\"text\"\n                                        name=\"title_ru\"\n                                        defaultValue={field.title_ru}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    />\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700\">\n                                    <select\n                                        className=\"text-sm w-full\"\n                                        form={`updateSearchFieldForm_${field.id}`}\n                                        name=\"fieldId\"\n                                        defaultValue={String(field.fieldId)}\n                                        onChange={() => {\n                                            const button = document.getElementById(`updateSearchFieldButton_${field.id}`) as HTMLButtonElement\n                                            button.click()\n                                        }}\n                                    >\n                                        <option value=\"\">-</option>\n                                        {inputFields && inputFields.map(\n                                            (fld: InputField & { group: Group & { inputForm: InputForm } }) => {\n                                                let frm = fld.group.inputForm.pos + '. ' + fld.group.inputForm[`title_${i18n.language}` as keyof typeof fld.group.inputForm]\n                                                let grp = fld.group.pos + '. ' + fld.group[`title_${i18n.language}` as keyof typeof fld.group]\n                                                let fieldTitle = frm + ' -> ' + grp + ' -> ' + fld.pos + '. ' + fld[`title_${i18n.language}` as keyof typeof fld]\n                                                return (\n                                                    <option key={fld.id} value={fld.id}>\n                                                        {fieldTitle}\n                                                    </option>)\n                                            })}\n                                    </select>\n                                </td>\n                                <td className=\"p-1 text-sm border border-blue-gray-700 w-10\">\n                                    <Form method=\"post\">\n                                        <input type=\"hidden\" name=\"id\" defaultValue={field.id} />\n                                        <CustomButton\n                                            className=\"bg-danger hover:shadow-danger_shadow\"\n                                            onClick={handleDelete}\n                                            type=\"submit\"\n                                            name=\"_action\"\n                                            value=\"deleteSearchField\"\n                                        >\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                                            </svg>\n                                        </CustomButton>\n                                    </Form>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </>\n    )\n}", "import DictionaryForm from \"./form_dict\"\nimport GroupForm from \"./form_group\"\nimport InputFormForm from \"./form_input\"\nimport SearchFormForm from \"./form_search\"\n\ntype FormsProps = {\n    state: string | null,\n    dictionaries: any,\n    groups: any,\n    inputForm: any,\n    searchForm: any,\n    dictionary: any,\n    group: any,\n    inputFields: any\n}\n\nexport default function Forms({\n    state,\n    dictionaries,\n    groups,\n    inputForm,\n    searchForm,\n    dictionary,\n    group,\n    inputFields\n}: FormsProps) {\n    return (\n        <div className=\"p-4 border w-3/4\">\n            {state === 'inputForm' && inputForm\n                ? <InputFormForm inputForm={inputForm} groups={groups} />\n                : state === 'searchForm' && searchForm\n                    ? <SearchFormForm searchForm={searchForm} inputFields={inputFields} />\n                    : state === 'dictionary' && dictionary\n                        ? <DictionaryForm dictionary={dictionary} />\n                        : state === 'group' && group\n                            ? <GroupForm group={group} dicts={dictionaries} />\n                            : null}\n        </div>\n    )\n}", "import Buttons from \"./buttons/buttons\";\nimport ErrorMessage from \"../../elements/error_message\";\nimport Panel from \"../../elements/panel\";\nimport DbStructNav from \"./navigator\";\nimport Forms from \"./forms/forms\";\n\ntype DbStructViewProps = {\n    errors?: string,\n    state: string | null,\n    inputForms: any,\n    searchForms: any,\n    dictionaries: any,\n    groups: any,\n    inputFormId: number | undefined,\n    searchFormId: number | undefined,\n    dictionaryId: number | undefined,\n    groupId: number | undefined,\n    inputForm: any,\n    searchForm: any,\n    dictionary: any,\n    group: any,\n    inputFields: any,\n}\n\nexport default function DbStructView({\n    errors,\n    state,\n    inputForms,\n    searchForms,\n    dictionaries,\n    groups,\n    inputFormId,\n    searchFormId,\n    dictionaryId,\n    groupId,\n    inputForm,\n    searchForm,\n    dictionary,\n    group,\n    inputFields,\n}: DbStructViewProps) {\n    return (\n        <div className=\"mx-1 flex flex-col gap-3 h-[calc(100vh-5rem)]\">\n            <ErrorMessage errors={errors} />\n            <Panel className=\"h-full overflow-auto\">\n                <Buttons\n                    state={state}\n                    dictionaries_count={dictionaries && dictionaries.length ? dictionaries.length : 0}\n                    inputForms_count={inputForms && inputForms.length ? inputForms.length : 0}\n                    searchForms_count={searchForms && searchForms.length ? searchForms.length : 0}\n                />\n                <div className=\"flex flex-row\">\n                    <DbStructNav\n                        state={state}\n                        inputForms={inputForms}\n                        searchForms={searchForms}\n                        dictionaries={dictionaries}\n                        groups={groups}\n                        inputFormId={inputFormId}\n                        searchFormId={searchFormId}\n                        dictionaryId={dictionaryId}\n                        groupId={groupId}\n                    />\n                    <Forms\n                        state={state}\n                        dictionaries={dictionaries}\n                        groups={groups}\n                        inputForm={inputForm}\n                        searchForm={searchForm}\n                        dictionary={dictionary}\n                        group={group}\n                        inputFields={inputFields}\n                    />\n                </div>\n            </Panel>\n        </div>\n    )\n}", "import { AccessInputForm, AccessSearchForm, AccessType, Department, Prisma, Role, UserRole } from \"@prisma/client\";\nimport { ActionFunctionArgs, LoaderFunctionArgs, json, redirect } from \"@remix-run/node\";\nimport { useActionData, useLoaderData } from \"@remix-run/react\";\nimport api from \"~/components/api\";\nimport UsersView from \"~/components/UI/widgets/users/view\";\n\nexport async function loader({\n    request,\n}: LoaderFunctionArgs) {\n    const roles: Role[] = await api.users.getRoles()\n    const users = await api.users.getUsers()\n    const departments: Department[] = await api.users.getDepartments()\n    const inputForms = await api.db.getInputForms()\n    const searchForms = await api.db.getSearchForms()\n    const url = new URL(request.url)\n    const state = url.searchParams.get(\"state\")\n    const roleId = url.searchParams.get(\"roleId\")\n    const userId = url.searchParams.get(\"userId\")\n    const isNewUser = url.searchParams.get(\"new_user\")\n    const currenUserId = url.searchParams.get(\"current_user\")\n    let user\n    if (isNewUser) {\n        user = {}\n    } else if (userId) {\n        user = await api.users.getUser(Number(userId))\n        user = { ...user, password: undefined }\n    }\n    let role\n    let accessInputForms = []\n    let accessSearchForms = []\n    if (roleId) {\n        role = await api.users.getRole(Number(roleId))\n        accessInputForms = await api.users.getAccessInputForms(Number(roleId))\n        accessSearchForms = await api.users.getAccessSearchForms(Number(roleId))\n    }\n    let userRoles = []\n    if (currenUserId) {\n        userRoles = await api.users.getUserRoles(Number(currenUserId))\n    }\n    return json({\n        state,\n        role,\n        roles,\n        isNewUser,\n        user,\n        users,\n        departments,\n        inputForms,\n        searchForms,\n        accessInputForms,\n        accessSearchForms,\n        currenUserId,\n        userRoles,\n    })\n}\n\nexport async function action({\n    request,\n}: ActionFunctionArgs) {\n    let errors: string | null = null\n    const formData = await request.formData()\n    const { _action, ...values } = Object.fromEntries(formData)\n    if (_action === 'createUser') {\n        const createUser = {\n            id: Number(values.id),\n            isActive: Boolean(values.isActive),\n            login: String(values.login),\n            password: String(values.password),\n            firstName: String(values.firstName),\n            lastName: String(values.lastName),\n            middleName: String(values.middleName),\n            departmentId: Number(values.departmentId),\n            expiredPwd: new Date(String(values.expiredPwd)),\n            createdAt: null,\n            updatedAt: null,\n        }\n        try {\n            await api.users.createUser(createUser)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateUser') {\n        const userId = Number(values.id)\n        const updateUser = {\n            id: Number(values.id),\n            isActive: Boolean(values.isActive),\n            login: String(values.login),\n            password: String(values.password),\n            firstName: String(values.firstName),\n            lastName: String(values.lastName),\n            middleName: String(values.middleName),\n            departmentId: Number(values.departmentId),\n            expiredPwd: new Date(String(values.expiredPwd)),\n            createdAt: null,\n            updatedAt: null,\n        }\n        try {\n            await api.users.updateUser(userId, updateUser)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteUser') {\n        const userId = Number(values.id)\n        try {\n            await api.users.deleteUser(userId)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyRole') {\n        try {\n            await api.users.createEmptyRole(Number(values.cnt))\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateRole') {\n        const roleId = Number(values.id)\n        const updateRole = {\n            id: Number(values.id),\n            title_kk: String(values.title_kk),\n            title_ru: String(values.title_ru),\n        }\n        try {\n            await api.users.updateRole(roleId, updateRole)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteRole') {\n        const roleId = Number(values.id)\n        try {\n            await api.users.deleteRole(roleId)\n            return redirect(\"/dashboard/users\")\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyAccessInput') {\n        try {\n            await api.users.createEmptyAccessInputForm(Number(values.roleId))\n            return redirect(`/dashboard/users?state=roles&roleId=${values.roleId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateAccessInput') {\n        const aformId = Number(values.id)\n        const updateAccessInput = {\n            id: Number(values.id),\n            roleId: Number(values.roleId),\n            formId: Number(values.formId),\n            accessType: String(values.accessType),\n        }\n        try {\n            await api.users.updateAccessInputForm(aformId, updateAccessInput as AccessInputForm)\n            return redirect(`/dashboard/users?state=roles&roleId=${values.roleId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteAccessInput') {\n        const aformId = Number(values.id)\n        try {\n            await api.users.deleteAccessInputForm(aformId)\n            return redirect(`/dashboard/users?state=roles&roleId=${values.roleId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyAccessSearch') {\n        try {\n            await api.users.createEmptyAccessSearchForm(Number(values.roleId))\n            return redirect(`/dashboard/users?state=roles&roleId=${values.roleId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateAccessSearch') {\n        const aformId = Number(values.id)\n        const updateAccessSearch = {\n            id: Number(values.id),\n            roleId: Number(values.roleId),\n            formId: Number(values.formId),\n            accessType: String(values.accessType),\n        }\n        try {\n            await api.users.updateAccessSearchForm(aformId, updateAccessSearch as AccessSearchForm)\n            return redirect(`/dashboard/users?state=roles&roleId=${values.roleId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteAccessSearch') {\n        const aformId = Number(values.id)\n        try {\n            await api.users.deleteAccessSearchForm(aformId)\n            return redirect(`/dashboard/users?state=roles&roleId=${values.roleId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'createEmptyUserRole') {\n        try {\n            await api.users.createEmptyUserRole(Number(values.userId))\n            return redirect(`/dashboard/users?state=users_roles&current_user=${values.userId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'updateUserRole') {\n        const userRoleId = Number(values.id)\n        const updateUserRole = {\n            id: Number(values.id),\n            userId: Number(values.userId),\n            roleId: Number(values.roleId),\n        }\n        try {\n            await api.users.updateUserRole(userRoleId, updateUserRole as UserRole)\n            return redirect(`/dashboard/users?state=roles&current_user=${values.userId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    if (_action === 'deleteUserRole') {\n        const userRoleId = Number(values.id)\n        try {\n            await api.users.deleteUserRole(userRoleId)\n            return redirect(`/dashboard/users?state=users_roles&current_user=${values.userId}`)\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                errors = e.message\n            }\n        }\n    }\n    return json({ errors })\n}\n\nexport default function Users() {\n    const {\n        state,\n        role,\n        roles,\n        isNewUser,\n        user,\n        users,\n        departments,\n        inputForms,\n        searchForms,\n        accessInputForms,\n        accessSearchForms,\n        currenUserId,\n        userRoles,\n    } = useLoaderData<typeof loader>()\n    const data = useActionData<typeof action>()\n\n    return (\n        <UsersView\n            state={state}\n            roles={roles}\n            role={role}\n            isNewUser={isNewUser ? true : false}\n            user={user}\n            users={users}\n            departments={departments}\n            inputForms={inputForms}\n            searchForms={searchForms}\n            accessInputForms={accessInputForms}\n            accessSearchForms={accessSearchForms}\n            currentUserId={Number(currenUserId)}\n            userRoles={userRoles}\n            errors={data?.errors ? data.errors : undefined}\n        />\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\";\nconst { Dialog, Card, CardBody, CardFooter } = MaterialTailwind;\nimport { Department, User } from \"@prisma/client\";\nimport { Form } from \"@remix-run/react\";\nimport moment from \"moment\";\nimport CustomInput from \"../../elements/custom_input\";\nimport CustomSelect from \"../../elements/custom_select\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ntype UserDialogProps = {\n    isNew: boolean\n    user: User | null,\n    departments: Department[],\n    errors: string | null | undefined\n}\n\nexport default function UserDialog({ isNew, user, departments, errors }: UserDialogProps) {\n    const { i18n, t } = useTranslation()\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        setOpen(user ? true : false)\n    }, [user])\n\n    return (\n        <Dialog\n            placeholder=\"\"\n            size=\"sm\"\n            open={open}\n            handler={() => setOpen(false)}\n            className=\"bg-transparent shadow-none\"\n        >\n            <Card className=\"mx-auto w-full\" placeholder=\"\">\n                <CardBody className=\"flex flex-col gap-4 overflow-auto\" placeholder=\"\">\n                    <Form\n                        id=\"userForm\"\n                        key={user?.id}\n                        className=\"flex flex-col gap-3\"\n                        method=\"post\"\n                    >\n                        <input type=\"hidden\" name=\"id\" defaultValue={user?.id ? user.id : ''} />\n                        <CustomInput\n                            id=\"user_is_active\"\n                            type=\"checkbox\"\n                            name=\"isActive\"\n                            title={t('is_active')}\n                            defaultChecked={user?.isActive}\n                        />\n                        <CustomInput\n                            id=\"user_login\"\n                            type=\"text\"\n                            name=\"login\"\n                            title={t('login')}\n                            defaultValue={user?.login}\n                            required={true}\n                            readOnly={!isNew}\n                            size={45}\n                        />\n                        <CustomInput\n                            id=\"user_password\"\n                            type=\"password\"\n                            name=\"password\"\n                            title={t('password')}\n                            defaultValue={user?.password}\n                            required={false}\n                            size={45}\n                        />\n                        <CustomInput\n                            id=\"user_firsName\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            title={t('first_name')}\n                            defaultValue={user?.firstName ? user.firstName : \"\"}\n                            required={false}\n                            size={45}\n                        />\n                        <CustomInput\n                            id=\"user_lastName\"\n                            type=\"text\"\n                            name=\"lastName\"\n                            title={t('last_name')}\n                            defaultValue={user?.lastName ? user.lastName : \"\"}\n                            required={false}\n                            size={45}\n                        />\n                        <CustomInput\n                            id=\"user_middleName\"\n                            type=\"text\"\n                            name=\"middleName\"\n                            title={t('middle_name')}\n                            defaultValue={user?.middleName ? user.middleName : \"\"}\n                            required={false}\n                            size={45}\n                        />\n                        <CustomSelect\n                            id=\"user_department\"\n                            name=\"departmentId\"\n                            title={t('department')}\n                            defaultValue={user?.departmentId ? user.departmentId : \"\"}\n                            required={false}\n                        >\n                            <option>-</option>\n                            {departments.map(item => (\n                                <option value={item.id}>{item[`title_${i18n.language}` as keyof typeof item]}</option>\n                            ))}\n                        </CustomSelect>\n                        <CustomInput\n                            id=\"user_expiredPwd\"\n                            type=\"date\"\n                            name=\"expiredPwd\"\n                            title={t('expired_password')}\n                            defaultValue={moment(user?.expiredPwd).format(\"YYYY-MM-DD\")}\n                            required={true}\n                            size={45}\n                        />\n                    </Form>\n                    <span className=\"text-red-500 text-sm\">{errors}</span>\n                </CardBody>\n                <CardFooter className=\"pt-0 flex flex-row gap-3 justify-center\" placeholder=\"\">\n                    <CustomButton\n                        className=\"bg-primary hover:shadow-primary_shadow\"\n                        form=\"userForm\"\n                        type=\"submit\"\n                        name=\"_action\"\n                        value={isNew ? \"createUser\" : \"updateUser\"}\n                    >\n                        {t('save')}\n                    </CustomButton>\n                    <CustomButton\n                        className=\"bg-primary hover:shadow-primary_shadow\"\n                        onClick={() => setOpen(false)}\n                    >\n                        {t('close')}\n                    </CustomButton>\n                </CardFooter>\n            </Card>\n        </Dialog>\n    )\n}", "import { useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function ButtonNewUser() {\n    const navigate = useNavigate()\n    const { t } = useTranslation()\n\n    return (\n        <CustomButton\n            className=\"bg-primary hover:shadow-blue-gray-100\"\n            onClick={() => navigate(\"/dashboard/users?new_user=True\")}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n            </svg>\n            {t('new_user')}\n        </CustomButton>\n\n    )\n}", "import moment from \"moment\";\nimport { Department, User } from \"@prisma/client\";\nimport { useNavigate } from \"@remix-run/react\";\nimport ButtonDeleteUser from \"./btn_delete_user\";\nimport { useTranslation } from \"react-i18next\";\nimport ButtonEditUser from \"./btn_edit_user\";\n\ntype UsersTableProps = {\n    currentUserId: number,\n    users: User[],\n    departments: Department[]\n}\n\nexport default function UsersTable({ currentUserId, users, departments }: UsersTableProps) {\n    const navigate = useNavigate()\n    const { t } = useTranslation()\n\n    return (\n        <table\n            className=\"w-full\"\n        >\n            <thead\n                className=\"bg-primary text-white text-center\"\n            >\n                <tr>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('is_active')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('login')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('first_name')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('last_name')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('middle_name')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('department')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('expired_password')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('created')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('updated')}</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                </tr>\n            </thead>\n            <tbody>\n                {users.map((user: User, index: number) => (\n                    <tr\n                        key={user.id}\n                        className={user?.id === currentUserId ? \"bg-selected hover:cursor-pointer\" : \" hover:cursor-pointer\"}\n                    >\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >{index + 1}</td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {user.isActive ? t('active') : t('not_active')}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {user.login}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {user.firstName}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {user.lastName}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {user.middleName}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {departments.find(item => item.id === user.departmentId)?.title}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {moment(user.expiredPwd).format('DD.MM.YYYY')}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {moment(user.createdAt).format('DD.MM.YYYY H:m:s')}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500\"\n                            onClick={() => navigate(`/dashboard/users?state=users&current_user=${user.id}`)}\n                        >\n                            {moment(user.updatedAt).format('DD.MM.YYYY H:m:s')}\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                            <ButtonEditUser userId={user.id} />\n                        </td>\n                        <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                            <ButtonDeleteUser userId={user.id} />\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonDeleteUserProps = {\n    userId: number\n}\n\nexport default function ButtonDeleteUser({ userId }: ButtonDeleteUserProps) {\n    const { t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"id\" defaultValue={userId} />\n            <CustomButton\n                className=\"bg-danger hover:shadow-danger_shadow\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteUser\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                </svg>\n            </CustomButton>\n        </Form>\n    )\n}", "import { useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonEditUserProps = {\n    userId: number\n}\n\nexport default function ButtonEditUser({ userId }: ButtonEditUserProps) {\n    const navigate = useNavigate()\n    const { t } = useTranslation()\n\n    return (\n        <CustomButton\n            className=\"bg-primary hover:shadow-blue-gray-100\"\n            onClick={() => navigate(`/dashboard/users?state=users&userId=${userId}`)}\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125\" />\n            </svg>\n        </CustomButton>\n\n    )\n}", "import { AccessInputForm, AccessSearchForm, Department, InputForm, Role, SearchForm, User } from \"@prisma/client\";\nimport UserDialog from \"./dlg_user\";\nimport ButtonNewUser from \"./btn_new_user\";\nimport Panel from \"../../elements/panel\";\nimport UsersTable from \"./tbl_users\";\nimport ErrorMessage from \"../../elements/error_message\";\nimport MaterialTailwind from \"@material-tailwind/react\";\nimport { useTranslation } from \"react-i18next\";\nimport RolesTable from \"./tbl_roles\";\nimport AccessInputFormsTable from \"./tbl_ainputforms\";\nimport ButtonAddAccessInputForm from \"./btn_add_ainputform\";\nimport ButtonAddRole from \"./btn_add_role\";\nimport ButtonAddAccessSearchForm from \"./btn_add_asearchform\";\nimport AccessSearchFormsTable from \"./tbl_asearchforms\";\nimport UsersOnlyLoginTable from \"./tbl_users_only_login\";\nimport RolesOnlyTitleTable from \"./tbl_roles_only_title\";\nimport ButtonAddUserRole from \"./btn_add_userrole\";\nconst { Tab, TabPanel, Tabs, TabsBody, TabsHeader } = MaterialTailwind;\n\n\ntype UserViewProps = {\n    state: string | null,\n    role: Role,\n    roles: Role[],\n    isNewUser: boolean,\n    user: User | null,\n    users: User[],\n    departments: Department[],\n    inputForms: InputForm[],\n    searchForms: SearchForm[],\n    accessInputForms: AccessInputForm[],\n    accessSearchForms: AccessSearchForm[],\n    currentUserId: number,\n    userRoles: any,\n    errors: string | undefined,\n}\n\nexport default function UsersView({\n    state,\n    role,\n    roles,\n    isNewUser,\n    user,\n    users,\n    departments,\n    inputForms,\n    searchForms,\n    accessInputForms,\n    accessSearchForms,\n    currentUserId,\n    userRoles,\n    errors,\n}: UserViewProps) {\n    const { t } = useTranslation()\n\n    return (\n        <div className=\"mx-1 flex flex-col gap-3 h-[calc(100vh-5rem)]\">\n            <ErrorMessage errors={errors} />\n            <UserDialog\n                isNew={isNewUser}\n                user={user}\n                departments={departments}\n                errors={errors}\n            />\n            <Panel className=\"h-full overflow-auto\">\n                <Tabs value={state ? state : \"users\"}>\n                    <TabsHeader\n                        placeholder=\"\"\n                    >\n                        <Tab\n                            className=\"capitalize text-primary font-bold\"\n                            value='users'\n                            placeholder=\"\"\n                        >\n                            {t('users')}\n                        </Tab>\n                        <Tab\n                            className=\"capitalize text-primary font-bold\"\n                            value='roles'\n                            placeholder=\"\"\n                        >\n                            {t('roles')}\n                        </Tab>\n                        <Tab\n                            className=\"capitalize text-primary font-bold\"\n                            value='users-roles'\n                            placeholder=\"\"\n                        >\n                            {t('users-roles')}\n                        </Tab>\n                    </TabsHeader>\n                    <TabsBody\n                        animate={{\n                            initial: { x: 250 },\n                            mount: { x: 0 },\n                            unmount: { x: 250 },\n                        }}\n                        placeholder=\"\"\n                    >\n                        <TabPanel className=\"p-1\" value='users'>\n                            <div className=\"mb-2 flex justify-between py-2 px-2 border border-blue-gray-100\">\n                                <div\n                                    className=\"flex items-center gap-3\"\n                                >\n                                    <ButtonNewUser />\n                                </div>\n                            </div>\n                            <UsersTable\n                                currentUserId={currentUserId}\n                                users={users}\n                                departments={departments}\n                            />\n                        </TabPanel>\n                        <TabPanel className=\"p-1\" value=\"users-roles\">\n                            <div className=\"mt-5 p-1 border flex gap-20\">\n                                <div className=\"w-1/2 flex flex-col gap-3\">\n                                    <h1 className=\"text-bold text-primary\">{t('users')}</h1>\n                                    <div className=\"w-full\">\n                                        <UsersOnlyLoginTable\n                                            users={users}\n                                            currentUserId={currentUserId}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"w-1/2 flex flex-col gap-3\">\n                                    <h1 className=\"text-bold text-primary\">{t('roles')}</h1>\n                                    {currentUserId ? <ButtonAddUserRole userId={currentUserId} /> : null}\n                                    <RolesOnlyTitleTable\n                                        roles={roles}\n                                        userRoles={userRoles}\n                                    />\n                                </div>\n                            </div>\n                        </TabPanel>\n                        <TabPanel className=\"p-1\" value=\"roles\">\n                            <div className=\"mt-5 p-1 border flex flex-col gap-3\">\n                                <h1 className=\"text-bold text-primary\">{t('roles')}</h1>\n                                <div>\n                                    <ButtonAddRole count={roles.length} />\n                                </div>\n                                <RolesTable role={role} roles={roles} />\n                            </div>\n                            <div className=\"mt-5 p-1 border flex flex-col gap-3\">\n                                <h1 className=\"text-bold text-primary\">{t('access_inputforms')}</h1>\n                                <div>\n                                    {role && <ButtonAddAccessInputForm roleId={role.id} />}\n                                </div>\n                                <AccessInputFormsTable\n                                    aforms={accessInputForms}\n                                    inputForms={inputForms}\n                                />\n                            </div>\n                            <div className=\"mt-5 p-1 border flex flex-col gap-3\">\n                                <h1 className=\"text-bold text-primary\">{t('access_searchforms')}</h1>\n                                <div>\n                                    {role && <ButtonAddAccessSearchForm roleId={role.id} />}\n                                </div>\n                                <AccessSearchFormsTable\n                                    aforms={accessSearchForms}\n                                    searchForms={searchForms}\n                                />\n                            </div>\n                        </TabPanel>\n                    </TabsBody>\n                </Tabs>\n\n            </Panel>\n        </div>\n    )\n}", "import { Role } from \"@prisma/client\";\nimport { Form, useNavigate } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport ButtonDeleteRole from \"./btn_delete_role\";\n\ntype RolesTableProps = {\n    role: Role,\n    roles: Role[]\n}\n\nexport default function RolesTable({ role, roles }: RolesTableProps) {\n    const navigate = useNavigate()\n    const { i18n, t } = useTranslation()\n\n    return (\n        <>\n            {roles.map((role: Role) => (\n                <Form\n                    key={role.id}\n                    method=\"post\"\n                    className=\"hidden\"\n                    id={`updateRoleForm_${role.id}`}\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={role.id} />\n                    <input\n                        id={`updateRoleButton_${role.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateRole\"\n                    />\n                </Form>\n            ))}\n            <table\n                className=\"w-full\"\n            >\n                <thead\n                    className=\"bg-primary text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('title_kk')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('title_ru')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {roles.map((rl: Role, index: number) => (\n                        <tr\n                            key={rl.id}\n                            className={role?.id === rl.id ? \"bg-selected hover:cursor-pointer\" : \"hover:cursor-pointer\"}\n                            onClick={() => navigate(`/dashboard/users?state=roles&roleId=${rl.id}`)}\n                        >\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{index + 1}</td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-500 hover:cursor-pointer hover:underline\"\n                            >\n                                <input\n                                    className=\"text-sm w-full focus:outline-none p-1 text-black\"\n                                    form={`updateRoleForm_${rl.id}`}\n                                    type=\"text\"\n                                    name=\"title_kk\"\n                                    defaultValue={rl.title_kk}\n                                    maxLength={45}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateRoleButton_${rl.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                />\n                            </td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-500 hover:cursor-pointer hover:underline\"\n                            >\n                                <input\n                                    className=\"text-sm w-full focus:outline-none p-1 text-black\"\n                                    form={`updateRoleForm_${rl.id}`}\n                                    type=\"text\"\n                                    name=\"title_ru\"\n                                    defaultValue={rl.title_ru}\n                                    maxLength={45}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateRoleButton_${rl.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                />\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                                <ButtonDeleteRole roleId={rl.id} />\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonDeleteRoleProps = {\n    roleId: number\n}\n\nexport default function ButtonDeleteRole({ roleId }: ButtonDeleteRoleProps) {\n    const { t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"id\" defaultValue={roleId} />\n            <CustomButton\n                className=\"bg-danger hover:shadow-danger_shadow\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteRole\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                </svg>\n            </CustomButton>\n        </Form>\n    )\n}", "import { AccessInputForm, AccessType, InputForm } from \"@prisma/client\";\nimport { Form } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport ButtonDeleteAccessInputForm from \"./btn_delete_ainputform\";\nimport CustomButton from \"../../elements/custom_button\";\n\n\ntype AccessInputFormsTableProps = {\n    aforms: any,\n    inputForms: InputForm[]\n}\n\nexport default function AccessInputFormsTable({ aforms, inputForms }: AccessInputFormsTableProps) {\n    const { i18n, t } = useTranslation()\n\n    return (\n        <>\n            {aforms && aforms.map((aform: AccessInputForm) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateAccessInputForm_${aform.id}`}\n                    key={`updateAccessInputForm_${aform.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={aform.id} />\n                    <input type=\"hidden\" name=\"roleId\" defaultValue={aform.roleId} />\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        id={`updateAccessInputFormButton_${aform.id}`}\n                        form={`updateAccessInputForm_${aform.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateAccessInput\"\n                    />\n                </Form>\n            ))}\n            <table\n                className=\"w-full\"\n            >\n                <thead\n                    className=\"bg-primary text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('form')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('access_type')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {aforms.map((aform: AccessInputForm, index: number) => (\n                        <tr\n                            key={aform.id}\n                        >\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{index + 1}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500\">\n                                <select\n                                    className=\"text-sm w-full\"\n                                    form={`updateAccessInputForm_${aform.id}`}\n                                    name=\"formId\"\n                                    defaultValue={aform.formId ? aform.formId : ''}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateAccessInputFormButton_${aform.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                >\n                                    {inputForms.map((inputForm: InputForm) => (\n                                        <option key={inputForm.id} value={inputForm.id}>\n                                            {inputForm[`title_${i18n.language}` as keyof typeof inputForm]}\n                                        </option>\n                                    ))}\n                                </select>\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-24\">\n                                <select\n                                    className=\"text-sm w-full\"\n                                    form={`updateAccessInputForm_${aform.id}`}\n                                    name=\"accessType\"\n                                    defaultValue={aform.accessType ? aform.accessType : ''}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateAccessInputFormButton_${aform.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                >\n                                    {Object.keys(AccessType).map((key) => <option key={key} value={key}>{key}</option>)}\n                                </select>\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                                <ButtonDeleteAccessInputForm aform={aform} />\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\nimport { AccessInputForm } from \"@prisma/client\";\n\ntype ButtonDeleteAccessInputFormProps = {\n    aform: AccessInputForm\n}\n\nexport default function ButtonDeleteAccessInputForm({ aform }: ButtonDeleteAccessInputFormProps) {\n    const { t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"id\" defaultValue={aform.id} />\n            <input type=\"hidden\" name=\"roleId\" defaultValue={aform.roleId} />\n            <CustomButton\n                className=\"bg-danger hover:shadow-danger_shadow\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteAccessInput\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                </svg>\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form, useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddAccessInputFormProps = {\n    roleId: number\n}\n\nexport default function ButtonAddAccessInputForm({ roleId }: ButtonAddAccessInputFormProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"roleId\" value={roleId} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-blue-gray-100\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptyAccessInput\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddRoleProps = {\n    count: number,\n}\n\nexport default function ButtonAddRole({ count }: ButtonAddRoleProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"cnt\" defaultValue={count + 1} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptyRole\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form, useNavigate } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddAccessSearchFormProps = {\n    roleId: number\n}\n\nexport default function ButtonAddAccessSearchForm({ roleId }: ButtonAddAccessSearchFormProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"roleId\" value={roleId} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-blue-gray-100\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptyAccessSearch\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { AccessSearchForm, AccessType, SearchForm } from \"@prisma/client\";\nimport { Form } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport ButtonDeleteAccessSearchForm from \"./btn_delete_asearchform\";\nimport CustomButton from \"../../elements/custom_button\";\n\n\ntype AccessSearchFormsTableProps = {\n    aforms: any,\n    searchForms: SearchForm[]\n}\n\nexport default function AccessSearchFormsTable({ aforms, searchForms }: AccessSearchFormsTableProps) {\n    const { i18n, t } = useTranslation()\n\n    return (\n        <>\n            {aforms && aforms.map((aform: AccessSearchForm) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateAccessSearchForm_${aform.id}`}\n                    key={`updateAccessSearchForm_${aform.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={aform.id} />\n                    <input type=\"hidden\" name=\"roleId\" defaultValue={aform.roleId} />\n                    <input type=\"hidden\" name=\"accessType\" defaultValue={AccessType.READ} />\n                    <CustomButton\n                        className=\"bg-green-500 hover:shadow-green-100\"\n                        id={`updateAccessSearchFormButton_${aform.id}`}\n                        form={`updateAccessSearchForm_${aform.id}`}\n                        type=\"submit\"\n                        name=\"_action\"\n                        value=\"updateAccessSearch\"\n                    />\n                </Form>\n            ))}\n            <table\n                className=\"w-full\"\n            >\n                <thead\n                    className=\"bg-primary text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('form')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {aforms.map((aform: AccessSearchForm, index: number) => (\n                        <tr\n                            key={aform.id}\n                        >\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{index + 1}</td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500\">\n                                <select\n                                    className=\"text-sm w-full\"\n                                    form={`updateAccessSearchForm_${aform.id}`}\n                                    name=\"formId\"\n                                    defaultValue={aform.formId ? aform.formId : ''}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateAccessSearchFormButton_${aform.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                >\n                                    {searchForms.map((searchForm: SearchForm) => (\n                                        <option key={searchForm.id} value={searchForm.id}>\n                                            {searchForm[`title_${i18n.language}` as keyof typeof searchForm]}\n                                        </option>\n                                    ))}\n                                </select>\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                                <ButtonDeleteAccessSearchForm aform={aform} />\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\nimport { AccessSearchForm } from \"@prisma/client\";\n\ntype ButtonDeleteAccessSearchFormProps = {\n    aform: AccessSearchForm\n}\n\nexport default function ButtonDeleteAccessSearchForm({ aform }: ButtonDeleteAccessSearchFormProps) {\n    const { t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"id\" defaultValue={aform.id} />\n            <input type=\"hidden\" name=\"roleId\" defaultValue={aform.roleId} />\n            <CustomButton\n                className=\"bg-danger hover:shadow-danger_shadow\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteAccessSearch\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                </svg>\n            </CustomButton>\n        </Form>\n    )\n}", "import { Department, User } from \"@prisma/client\";\nimport { useNavigate } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\n\ntype UsersOnlyLoginTableProps = {\n    users: User[],\n    currentUserId: number,\n}\n\nexport default function UsersOnlyLoginTable({ users, currentUserId }: UsersOnlyLoginTableProps) {\n    const navigate = useNavigate()\n    const { t } = useTranslation()\n\n    return (\n        <table\n            className=\"w-full\"\n        >\n            <thead\n                className=\"bg-primary text-white text-center\"\n            >\n                <tr>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                    <th className=\"p-1 text-sm border border-blue-gray-500\">{t('login')}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {users.map((user: User, index: number) => (\n                    <tr\n                        key={user.id}\n                        className={user?.id === currentUserId ? \"bg-selected hover:cursor-pointer\" : \" hover:cursor-pointer\"}\n                        onClick={() => navigate(`/dashboard/users?state=users_roles&current_user=${user.id}`)}\n                    >\n                        <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{index + 1}</td>\n                        <td\n                            className=\"p-1 text-sm border border-blue-gray-500\"\n\n                        >\n                            {user.login}\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n}", "import { Role, UserRole } from \"@prisma/client\";\nimport { useTranslation } from \"react-i18next\";\nimport ButtonDeleteUserRole from \"./btn_delete_userrole\";\nimport { Form } from \"@remix-run/react\";\n\ntype RolesOnlyTitleTableProps = {\n    userRoles: any,\n    roles: Role[]\n}\n\nexport default function RolesOnlyTitleTable({ userRoles, roles }: RolesOnlyTitleTableProps) {\n    const { i18n, t } = useTranslation()\n\n    return (\n        <>\n            {userRoles && userRoles.map((ur: UserRole) => (\n                <Form\n                    className=\"hidden\"\n                    id={`updateUserRole_${ur.id}`}\n                    key={`updateUserRole_${ur.id}`}\n                    method=\"post\"\n                >\n                    <input type=\"hidden\" name=\"id\" defaultValue={ur.id} />\n                    <input type=\"hidden\" name=\"userId\" defaultValue={ur.userId ? ur.userId : ''} />\n                    <input\n                        type=\"submit\"\n                        id={`updateUserRoleButton_${ur.id}`}\n                        form={`updateUserRole_${ur.id}`}\n                        name=\"_action\"\n                        value=\"updateUserRole\"\n                    />\n                </Form>\n            ))}\n            <table\n                className=\"w-full\"\n            >\n                <thead\n                    className=\"bg-primary text-white text-center\"\n                >\n                    <tr>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">#</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\">{t('title')}</th>\n                        <th className=\"p-1 text-sm border border-blue-gray-500\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {userRoles.map((ur: UserRole, index: number) => (\n                        <tr\n                            key={ur.id}\n                        >\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">{index + 1}</td>\n                            <td\n                                className=\"p-1 text-sm border border-blue-gray-500\"\n                            >\n                                <select\n                                    className=\"text-sm w-full\"\n                                    form={`updateUserRole_${ur.id}`}\n                                    name=\"roleId\"\n                                    defaultValue={ur.roleId ? ur.roleId : ''}\n                                    onChange={() => {\n                                        const button = document.getElementById(`updateUserRoleButton_${ur.id}`) as HTMLButtonElement\n                                        button.click()\n                                    }}\n                                >\n                                    {roles.map((role: Role) => (\n                                        <option key={role.id} value={role.id}>\n                                            {role[`title_${i18n.language}` as keyof typeof role]}\n                                        </option>\n                                    ))}\n                                </select>\n                            </td>\n                            <td className=\"p-1 text-sm border border-blue-gray-500 w-10\">\n                                <ButtonDeleteUserRole userRoleId={ur.id} userId={ur.userId} />\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonDeleteUserRoleProps = {\n    userRoleId: number,\n    userId: number | null,\n}\n\nexport default function ButtonDeleteUserRole({ userRoleId, userId }: ButtonDeleteUserRoleProps) {\n    const { t } = useTranslation()\n\n    const handleDelete = async (event: any) => {\n        const response = confirm(\n            t('confirm_delete')\n        )\n        if (!response) {\n            event.preventDefault()\n        }\n    }\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"id\" defaultValue={userRoleId} />\n            <input type=\"hidden\" name=\"userId\" defaultValue={userId ? userId : ''} />\n            <CustomButton\n                className=\"bg-danger hover:shadow-danger_shadow\"\n                onClick={handleDelete}\n                type=\"submit\"\n                name=\"_action\"\n                value=\"deleteUserRole\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n                </svg>\n            </CustomButton>\n        </Form>\n    )\n}", "import { Form } from \"@remix-run/react\";\nimport CustomButton from \"../../elements/custom_button\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ButtonAddUserRoleProps = {\n    userId: number,\n}\n\nexport default function ButtonAddUserRole({ userId }: ButtonAddUserRoleProps) {\n    const { t } = useTranslation()\n\n    return (\n        <Form method=\"post\">\n            <input type=\"hidden\" name=\"userId\" defaultValue={userId} />\n            <CustomButton\n                className=\"bg-primary hover:shadow-primary_shadow\"\n                type=\"submit\"\n                name=\"_action\"\n                value=\"createEmptyUserRole\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                {t('add')}\n            </CustomButton>\n        </Form>\n    )\n}", "import { InputForm, SearchForm } from \"@prisma/client\";\nimport { json, useLoaderData } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport api from \"~/components/api\";\nimport { ContexType, ICondition } from \"~/types/types\";\nimport {\n    NewspaperIcon,\n    UsersIcon,\n    CircleStackIcon,\n    BookOpenIcon,\n} from \"@heroicons/react/24/solid\";\n\nimport { useTranslation } from \"react-i18next\";\nimport DashboardView from \"~/components/UI/widgets/dashboard/view\";\n\nexport async function loader() {\n    const dictionaries = await api.db.getDictionaries()\n    const inputForms = await api.db.getInputForms()\n    const searchForms = await api.db.getSearchForms()\n    return json({\n        dictionaries,\n        inputForms,\n        searchForms\n    })\n}\n\nexport default function dashboard() {\n    const { i18n, t } = useTranslation()\n    const data = useLoaderData<typeof loader>()\n    const [docs, setDocs] = useState<{ formId?: number, ids?: number[] }>({})\n    const [current, setCurrent] = useState(0)\n    const [conditions, setConditions] = useState<ICondition[]>([])\n    const context: ContexType = {\n        ...data,\n        docs,\n        setDocs,\n        current,\n        setCurrent,\n        conditions,\n        setConditions\n    }\n    const [openNav, setOpenNav] = useState(false);\n\n    const editDataMenuItems =\n        data.inputForms.map((item: InputForm) => {\n            return {\n                title: item[`title_${i18n.language}` as keyof typeof item],\n                link: `/dashboard/enter_data/${item.id}`,\n                icon: NewspaperIcon,\n            }\n        })\n\n    const searchDataMenuItems =\n        data.searchForms.map((item: SearchForm) => {\n            return {\n                title: item[`title_${i18n.language}` as keyof typeof item],\n                link: `/dashboard/search_data/${item.id}`,\n                icon: NewspaperIcon,\n            }\n        })\n\n    const serviceMenuItems = [\n        {\n            title: t('menu_db_structure'),\n            link: \"db_struct\",\n            icon: CircleStackIcon\n        },\n        {\n            title: t('menu_db_users'),\n            link: \"users\",\n            icon: UsersIcon\n        },\n        {\n            title: t('menu_dictionaries'),\n            link: \"dictionaries\",\n            icon: BookOpenIcon\n        },\n    ]\n\n    useEffect(() => {\n        window.addEventListener(\n            \"resize\",\n            () => window.innerWidth >= 960 && setOpenNav(false),\n        );\n    }, []);\n\n    return (\n        <DashboardView\n            openNav={openNav}\n            setOpenNav={setOpenNav}\n            editDataMenuItems={editDataMenuItems}\n            searchDataMenuItems={searchDataMenuItems}\n            serviceMenuItems={serviceMenuItems}\n            context={context}\n        />\n    )\n}", "import { Outlet } from \"@remix-run/react\"\nimport MainMenu from \"./menu/main_menu\"\nimport { Dispatch, SetStateAction } from \"react\"\nimport { ContexType, MenuItem } from \"~/types/types\"\n\ntype DashboardViewProps = {\n    openNav: boolean,\n    setOpenNav: Dispatch<SetStateAction<boolean>>,\n    editDataMenuItems: MenuItem[],\n    searchDataMenuItems: MenuItem[],\n    serviceMenuItems: MenuItem[],\n    context: ContexType\n}\n\nexport default function DashboardView({\n    openNav,\n    setOpenNav,\n    editDataMenuItems,\n    searchDataMenuItems,\n    serviceMenuItems,\n    context }: DashboardViewProps) {\n    return (\n        <div className=\"w-full h-screen\">\n            <MainMenu\n                openNav={openNav}\n                setOpenNav={setOpenNav}\n                editDataMenuItems={editDataMenuItems}\n                searchDataMenuItems={searchDataMenuItems}\n                serviceMenuItems={serviceMenuItems}\n            />\n            <div className=\"overflow-y-auto h-[calc(100vh-5rem)]\">\n                <Outlet context={context} />\n            </div>\n        </div>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nimport Logo from \"~/components/UI/elements/logo\"\nimport { MenuItem } from \"~/types/types\"\nimport NavList from \"./nav_list\"\nimport LanguagePanel from \"~/components/UI/elements/language\"\nimport { Dispatch, SetStateAction } from \"react\"\nconst {\n    IconButton,\n    Collapse,\n} = MaterialTailwind\nimport {\n    Bars3Icon,\n    XMarkIcon,\n} from \"@heroicons/react/24/outline\"\n\ntype MainMenuProps = {\n    openNav: boolean,\n    setOpenNav: Dispatch<SetStateAction<boolean>>,\n    editDataMenuItems: MenuItem[],\n    searchDataMenuItems: MenuItem[],\n    serviceMenuItems: MenuItem[],\n}\n\nexport default function MainMenu({\n    openNav,\n    setOpenNav,\n    editDataMenuItems,\n    searchDataMenuItems,\n    serviceMenuItems }: MainMenuProps) {\n    return (\n        <div className=\"w-full\">\n            <div\n                className=\"w-full px-4 bg-white shadow shadow-blue-gray-500 mb-2\"\n\n            >\n                <div className=\"w-full flex items-center justify-between text-blue-gray-900\">\n                    <div className=\"shrink-0 h-16\">\n                        <Logo />\n                    </div>\n                    <div className=\"hidden lg:block\">\n                        <NavList\n                            editDataMenuItems={editDataMenuItems}\n                            searchDataMenuItems={searchDataMenuItems}\n                            serviceMenuItems={serviceMenuItems}\n                        />\n                    </div>\n                    <IconButton\n                        variant=\"text\"\n                        color=\"blue-gray\"\n                        className=\"lg:hidden\"\n                        onClick={() => setOpenNav(!openNav)}\n                        placeholder=\"\"\n                    >\n                        {openNav ? (\n                            <XMarkIcon className=\"h-6 w-6\" strokeWidth={2} />\n                        ) : (\n                            <Bars3Icon className=\"h-6 w-6\" strokeWidth={2} />\n                        )}\n                    </IconButton>\n                    <LanguagePanel />\n                </div>\n                <Collapse open={openNav}>\n                    <NavList\n                        editDataMenuItems={editDataMenuItems}\n                        searchDataMenuItems={searchDataMenuItems}\n                        serviceMenuItems={serviceMenuItems}\n                    />\n                </Collapse>\n            </div>\n        </div>\n    )\n}", "import { Link } from \"@remix-run/react\";\n\nconst Logo = () => {\n    return (\n        <Link to=\"/dashboard\" className=\"flex gap-3\">\n            < img\n                className=\"h-14 object-cover object-center\"\n                src=\"/logo.png\"\n                alt=\"logo\"\n            />\n            <span className=\"font-bold text-lg self-center text-primary text-bold h-4\">\n                Db Creator\n            </span>\n        </Link >\n    )\n}\n\nexport default Logo;", "import MaterialTailwind from \"@material-tailwind/react\"\nconst { List } = MaterialTailwind\nimport NavListMenu from \"./nav_list_menu\"\nimport { MenuItem } from \"~/types/types\"\nimport { useTranslation } from \"react-i18next\"\n\ntype NavListProps = {\n    editDataMenuItems: MenuItem[],\n    searchDataMenuItems: MenuItem[],\n    serviceMenuItems: MenuItem[],\n}\n\nexport default function NavList({\n    editDataMenuItems,\n    searchDataMenuItems,\n    serviceMenuItems\n}: NavListProps) {\n    const { t } = useTranslation()\n\n    return (\n        <List\n            className=\"mt-4 mb-6 p-0 lg:mt-0 lg:mb-0 lg:flex-row lg:p-1\"\n            placeholder=\"\"\n        >\n            <NavListMenu\n                menuTitle={t('edit_data')}\n                navListMenuItems={editDataMenuItems}\n            />\n            <NavListMenu\n                menuTitle={t('search_data')}\n                navListMenuItems={searchDataMenuItems}\n            />\n            <NavListMenu\n                menuTitle={t('service')}\n                navListMenuItems={serviceMenuItems}\n            />\n        </List>\n    )\n}", "import MaterialTailwind from \"@material-tailwind/react\"\nconst {\n    Collapse,\n    Typography,\n    ListItem,\n    Menu,\n    MenuHandler,\n    MenuList,\n    MenuItem,\n} = MaterialTailwind\nimport { Fragment, createElement, useState } from \"react\";\nimport { ChevronDownIcon } from \"@heroicons/react/24/outline\";\nimport { Link } from \"@remix-run/react\";\n\ntype NavListMenuProps = {\n    menuTitle: string,\n    navListMenuItems: {\n        title: string,\n        link: string,\n        icon: any\n    }[]\n}\n\nexport default function NavListMenu({ menuTitle, navListMenuItems }: NavListMenuProps) {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n    const renderItems = navListMenuItems.map(\n        ({ icon, title, link }, key) => (\n            <div key={key}>\n                <MenuItem\n                    placeholder=\"\"\n                    className=\"flex items-center gap-3 rounded-lg\"\n                >\n                    <div className=\"flex items-center justify-center rounded-lg !bg-blue-gray-50 p-2 \">\n                        {\" \"}\n                        {createElement(icon, {\n                            strokeWidth: 2,\n                            className: \"h-6 text-primary w-6\",\n                        })}\n                    </div>\n                    <div>\n                        <Typography\n                            className=\"flex items-center text-sm font-bold text-primary\"\n                            variant=\"h6\"\n                            placeholder=\"\"\n                        >\n                            <Link to={link}>{title}</Link>\n                        </Typography>\n                    </div>\n                </MenuItem>\n            </div>\n        ),\n    );\n\n    return (\n        <Fragment>\n            <Menu\n                open={isMenuOpen}\n                handler={setIsMenuOpen}\n                offset={{ mainAxis: 20 }}\n                placement=\"bottom\"\n            >\n                <MenuHandler>\n                    <Typography\n                        className=\"font-medium\"\n                        as=\"div\"\n                        variant=\"small\"\n                        placeholder=\"\"\n                    >\n                        <ListItem\n                            className=\"flex items-center gap-2 py-2 pr-4 font-bold text-primary h-6\"\n                            selected={isMenuOpen || isMobileMenuOpen}\n                            onClick={() => setIsMobileMenuOpen((cur) => !cur)}\n                            placeholder=\"\"\n                        >\n                            {menuTitle}\n                            <ChevronDownIcon\n                                strokeWidth={2.5}\n                                className={`hidden h-3 w-3 transition-transform lg:block ${isMenuOpen ? \"rotate-180\" : \"\"\n                                    }`}\n                            />\n                            <ChevronDownIcon\n                                strokeWidth={2.5}\n                                className={`block h-3 w-3 transition-transform lg:hidden ${isMobileMenuOpen ? \"rotate-180\" : \"\"\n                                    }`}\n                            />\n                        </ListItem>\n                    </Typography>\n                </MenuHandler>\n                <MenuList\n                    className=\"hidden max-w-screen-xl rounded-xl lg:block\"\n                    placeholder=\"\"\n                >\n                    <ul className=\"flex flex-col gap-y-2 outline-none outline-0\">\n                        {renderItems}\n                    </ul>\n                </MenuList>\n            </Menu>\n            <div className=\"block lg:hidden\">\n                <Collapse open={isMobileMenuOpen}>{renderItems}</Collapse>\n            </div>\n        </Fragment>\n    )\n}", "import { useTranslation } from \"react-i18next\";\n\nexport default function LanguagePanel() {\n    const { i18n } = useTranslation();\n\n    const langs = [\n        {\n            title: 'KAZ',\n            label: 'kk'\n        },\n        {\n            title: 'RUS',\n            label: 'ru'\n        },\n    ]\n\n    return (\n        <div className='flex flex-row justify-center items-center gap-4 font-bold'>\n            {langs.map((item, index) => (\n                <span\n                    key={index}\n                    className={`${i18n.language === item.label ? 'bg-primary text-white' : 'border border-primary'} p-1 text-sm rounded-md hover:cursor-pointer`}\n                    onClick={() => i18n.changeLanguage(item.label)}\n                >\n                    {item.title}\n                </span>\n            ))}\n        </div>\n    )\n}", "import type { MetaFunction } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"New Remix App\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\nexport default function Index() {\n  return (\n    <div>\n      <Link to=\"/dashboard\">Dashboard</Link>\n    </div>\n  );\n}\n", "export default {'entry':{'module':'/build/entry.client-QR2IZ3WB.js','imports':['/build/_shared/chunk-OAPPX4FA.js','/build/_shared/chunk-Z46RVADL.js','/build/_shared/chunk-AX7SAOSU.js','/build/_shared/chunk-7PHB3BFD.js','/build/_shared/chunk-FQWAC4DA.js','/build/_shared/chunk-SOESSFXD.js','/build/_shared/chunk-JR22VO6P.js','/build/_shared/chunk-WEAPBHQG.js','/build/_shared/chunk-CJ4MY3PQ.js','/build/_shared/chunk-PZDJHGND.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-6HOPXKBO.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-JCFTVRU3.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard':{'id':'routes/dashboard','parentId':'root','path':'dashboard','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard-ATCVKR7K.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.db_struct':{'id':'routes/dashboard.db_struct','parentId':'routes/dashboard','path':'db_struct','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.db_struct-V27XHE5W.js','imports':['/build/_shared/chunk-KJDVWT2A.js','/build/_shared/chunk-QI3KDWHL.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.dictionaries':{'id':'routes/dashboard.dictionaries','parentId':'routes/dashboard','path':'dictionaries','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.dictionaries-PQFMGWYS.js','imports':['/build/_shared/chunk-QI3KDWHL.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.enter_data.$formId':{'id':'routes/dashboard.enter_data.$formId','parentId':'routes/dashboard','path':'enter_data/:formId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.enter_data.$formId-JLDEXYBO.js','imports':['/build/_shared/chunk-UKC5B2IM.js','/build/_shared/chunk-KJDVWT2A.js','/build/_shared/chunk-QI3KDWHL.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.search_data.$formId':{'id':'routes/dashboard.search_data.$formId','parentId':'routes/dashboard','path':'search_data/:formId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.search_data.$formId-UVBUHOZ3.js','imports':['/build/_shared/chunk-KJDVWT2A.js','/build/_shared/chunk-QI3KDWHL.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/dashboard.users':{'id':'routes/dashboard.users','parentId':'routes/dashboard','path':'users','index':undefined,'caseSensitive':undefined,'module':'/build/routes/dashboard.users-KYRDFUJ5.js','imports':['/build/_shared/chunk-UKC5B2IM.js','/build/_shared/chunk-KJDVWT2A.js','/build/_shared/chunk-QI3KDWHL.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'9a4716f2','hmr':{'runtime':'/build/_shared/chunk-SOESSFXD.js','timestamp':1710508455907},'url':'/build/manifest-9A4716F2.js'};", "\nimport * as entryServer from \"/home/kairat/my_projects/DbCreator/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/dashboard.search_data.$formId.tsx\";\nimport * as route2 from \"./routes/dashboard.enter_data.$formId.tsx\";\nimport * as route3 from \"./routes/dashboard.dictionaries.tsx\";\nimport * as route4 from \"./routes/dashboard.db_struct.tsx\";\nimport * as route5 from \"./routes/dashboard.users.tsx\";\nimport * as route6 from \"./routes/dashboard.tsx\";\nimport * as route7 from \"./routes/_index.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/dashboard.search_data.$formId\": {\n      id: \"routes/dashboard.search_data.$formId\",\n      parentId: \"routes/dashboard\",\n      path: \"search_data/:formId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/dashboard.enter_data.$formId\": {\n      id: \"routes/dashboard.enter_data.$formId\",\n      parentId: \"routes/dashboard\",\n      path: \"enter_data/:formId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/dashboard.dictionaries\": {\n      id: \"routes/dashboard.dictionaries\",\n      parentId: \"routes/dashboard\",\n      path: \"dictionaries\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/dashboard.db_struct\": {\n      id: \"routes/dashboard.db_struct\",\n      parentId: \"routes/dashboard\",\n      path: \"db_struct\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/dashboard.users\": {\n      id: \"routes/dashboard.users\",\n      parentId: \"routes/dashboard\",\n      path: \"users\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/dashboard\": {\n      id: \"routes/dashboard\",\n      parentId: \"root\",\n      path: \"dashboard\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    }\n  };"],
  "mappings": "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",
  "names": ["Backend", "resolve", "Backend", "jsxDEV", "loader", "json", "useLoaderData", "useState", "prisma", "prisma", "prisma", "jsxDEV", "MaterialTailwind", "jsxDEV", "jsxDEV", "jsxDEV", "MaterialTailwind", "useTranslation", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "useSubmit", "jsxDEV", "jsxDEV", "jsxDEV", "useSubmit", "cond", "condIndex", "jsxDEV", "loader", "json", "useLoaderData", "useState", "action", "loader", "Prisma", "json", "useActionData", "useLoaderData", "useOutletContext", "useEffect", "useState", "useState", "useTranslation", "jsxDEV", "useNavigate", "useTranslation", "jsxDEV", "useNavigate", "useTranslation", "jsxDEV", "useNavigate", "useTranslation", "jsxDEV", "useNavigate", "useTranslation", "useSubmit", "jsxDEV", "useTranslation", "useTranslation", "jsxDEV", "useTranslation", "useNavigate", "useTranslation", "jsxDEV", "ButtonSearch", "useNavigate", "jsxDEV", "Buttons", "ButtonSearch", "MaterialTailwind", "useNavigate", "useTranslation", "jsxDEV", "Dialog", "Card", "CardBody", "CardFooter", "MaterialTailwind", "useNavigate", "useNavigate", "useState", "jsxDEV", "val", "useSubmit", "jsxDEV", "useTranslation", "jsxDEV", "useTranslation", "jsxDEV", "useTranslation", "jsxDEV", "useTranslation", "jsxDEV", "useSubmit", "MaterialTailwind", "useTranslation", "jsxDEV", "Dialog", "Card", "CardBody", "CardFooter", "MaterialTailwind", "jsxDEV", "useState", "Buttons", "jsxDEV", "loader", "json", "action", "Prisma", "useOutletContext", "useLoaderData", "document", "useState", "useActionData", "useEffect", "action", "loader", "Prisma", "json", "redirect", "useActionData", "useLoaderData", "useOutletContext", "Form", "useTranslation", "jsxDEV", "useTranslation", "Form", "jsxDEV", "Buttons", "useNavigate", "useTranslation", "jsxDEV", "Form", "useTranslation", "Form", "useTranslation", "jsxDEV", "useTranslation", "Form", "jsxDEV", "useTranslation", "Form", "jsxDEV", "Buttons", "jsxDEV", "loader", "json", "action", "redirect", "Prisma", "useOutletContext", "useLoaderData", "useActionData", "action", "loader", "Prisma", "json", "redirect", "useActionData", "useLoaderData", "useOutletContext", "Form", "useTranslation", "jsxDEV", "Form", "Form", "useTranslation", "jsxDEV", "Form", "Form", "useTranslation", "jsxDEV", "Form", "MaterialTailwind", "Form", "useTranslation", "Fragment", "jsxDEV", "MaterialTailwind", "useTranslation", "Form", "jsxDEV", "Buttons", "Link", "useTranslation", "jsxDEV", "Form", "useTranslation", "Fragment", "jsxDEV", "Form", "Form", "useNavigate", "useTranslation", "Fragment", "jsxDEV", "useNavigate", "Form", "Form", "useTranslation", "Fragment", "jsxDEV", "Form", "Form", "useTranslation", "Fragment", "jsxDEV", "Form", "jsxDEV", "jsxDEV", "Buttons", "jsxDEV", "loader", "json", "action", "redirect", "Prisma", "useOutletContext", "useLoaderData", "useActionData", "action", "loader", "Prisma", "json", "redirect", "useActionData", "useLoaderData", "MaterialTailwind", "Form", "useEffect", "useState", "useTranslation", "jsxDEV", "Dialog", "Card", "CardBody", "CardFooter", "MaterialTailwind", "Form", "useNavigate", "useTranslation", "jsxDEV", "useNavigate", "moment", "useNavigate", "Form", "useTranslation", "jsxDEV", "Form", "useTranslation", "useNavigate", "useTranslation", "jsxDEV", "useNavigate", "jsxDEV", "useNavigate", "useTranslation", "moment", "MaterialTailwind", "useTranslation", "Form", "useNavigate", "useTranslation", "Form", "useTranslation", "jsxDEV", "Form", "Fragment", "jsxDEV", "useNavigate", "useTranslation", "role", "Form", "Form", "useTranslation", "Form", "useTranslation", "jsxDEV", "Form", "Fragment", "jsxDEV", "useTranslation", "Form", "Form", "useTranslation", "jsxDEV", "Form", "Form", "useTranslation", "jsxDEV", "Form", "Form", "useTranslation", "jsxDEV", "Form", "AccessType", "Form", "useTranslation", "Form", "useTranslation", "jsxDEV", "Form", "Fragment", "jsxDEV", "useTranslation", "Form", "AccessType", "useNavigate", "useTranslation", "jsxDEV", "useTranslation", "Form", "useTranslation", "jsxDEV", "Form", "Form", "Fragment", "jsxDEV", "useTranslation", "Form", "useTranslation", "jsxDEV", "Form", "jsxDEV", "MaterialTailwind", "useTranslation", "jsxDEV", "loader", "json", "action", "redirect", "Prisma", "useLoaderData", "useActionData", "loader", "json", "useLoaderData", "useEffect", "useState", "useTranslation", "Outlet", "MaterialTailwind", "Link", "jsxDEV", "MaterialTailwind", "MaterialTailwind", "Fragment", "useState", "Link", "jsxDEV", "useTranslation", "jsxDEV", "MaterialTailwind", "useTranslation", "jsxDEV", "jsxDEV", "Collapse", "MaterialTailwind", "jsxDEV", "Outlet", "jsxDEV", "loader", "json", "useTranslation", "useLoaderData", "useState", "useEffect", "Link", "jsxDEV"]
}
