{
  "version": 3,
  "sources": ["empty-module:~/i18next.server", "../../node_modules/remix-i18next/build/react.js", "../../app/root.tsx"],
  "sourcesContent": ["module.exports = {};", "import { useMatches } from \"@remix-run/react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n/**\n * Preload the translations files for the current language and the namespaces\n * required by the routes.\n *\n * It receives a single `loadPath` prop with the path to the translation files.\n *\n * @example\n * <PreloadTranslations loadPath=\"/locales/{{lng}}/{{ns}}.json\" />\n *\n */\nexport function PreloadTranslations({ loadPath }) {\n    let { i18n } = useTranslation();\n    let namespaces = [\n        ...new Set(useMatches()\n            .filter((route) => route.handle?.i18n !== undefined)\n            .flatMap((route) => route.handle.i18n)),\n    ];\n    let lang = i18n.language;\n    return (React.createElement(React.Fragment, null, namespaces.map((namespace) => {\n        return (React.createElement(\"link\", { key: namespace, rel: \"preload\", as: \"fetch\", href: loadPath\n                .replace(\"{{lng}}\", lang)\n                .replace(\"{{ns}}\", namespace) }));\n    })));\n}\n/**\n * Get the locale returned by the root route loader under the `locale` key.\n * @example\n * let locale = useLocale()\n * let formattedDate = date.toLocaleDateString(locale);\n * @example\n * let locale = useLocale(\"language\")\n * let formattedDate = date.toLocaleDateString(locale);\n */\nexport function useLocale(localeKey = \"locale\") {\n    let [rootMatch] = useMatches();\n    let { [localeKey]: locale } = rootMatch.data ?? {};\n    if (!locale)\n        throw new Error(\"Missing locale returned by the root loader.\");\n    if (typeof locale === \"string\")\n        return locale;\n    throw new Error(\"Invalid locale returned by the root loader.\");\n}\n/**\n * Detect when the locale returned by the root route loader changes and call\n * `i18n.changeLanguage` with the new locale.\n * This will ensure translations are loaded automatically.\n */\nexport function useChangeLanguage(locale) {\n    let { i18n } = useTranslation();\n    React.useEffect(() => {\n        i18n.changeLanguage(locale);\n    }, [locale, i18n]);\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n}\n// REMIX HMR END\n\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, json, useLoaderData } from \"@remix-run/react\";\nimport { useChangeLanguage } from \"remix-i18next/react\";\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"~/i18next.server\";\nimport stylesheet from \"~/tailwind.css\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: stylesheet\n}];\nexport async function loader({\n  request\n}) {\n  let locale = await i18next.getLocale(request);\n  return json({\n    locale\n  });\n}\nexport let handle = {\n  // In the handle export, we can add a i18n key with namespaces our route\n  // will need to load. This key can be a single string or an array of strings.\n  // TIP: In most cases, you should set this to your defaultNS from your i18n config\n  // or if you did not set one, set it to the i18next default namespace \"translation\"\n  i18n: \"common\"\n};\nexport default function App() {\n  _s();\n  // Get the locale from the loader\n  let {\n    locale\n  } = useLoaderData();\n  let {\n    i18n\n  } = useTranslation();\n\n  // This hook will change the i18n instance language to the current locale\n  // detected by the loader, this way, when we do something to change the\n  // language, this locale will change and i18next will load the correct\n  // translation files\n  useChangeLanguage(locale);\n  return <html lang={locale} dir={i18n.dir()}>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"bg-blue-gray-50\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>;\n}\n_s(App, \"iAs9jYpu1f6cCl3KpMn/acHSmsc=\", false, function () {\n  return [useLoaderData, useTranslation, useChangeLanguage];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACClB,YAAuB;AAiDhB,SAAS,kBAAkB,QAAQ;AACtC,MAAI,EAAE,KAAK,IAAI,eAAe;AAC9B,EAAM,gBAAU,MAAM;AAClB,SAAK,eAAe,MAAM;AAAA,EAC9B,GAAG,CAAC,QAAQ,IAAI,CAAC;AACrB;;;AChCA,qBAAoB;;;;;;AAsCZ;AA5DR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AAChB;AAQO,IAAM,QAAQ,MAAM,CAAC;AAAA,EAC1B,KAAK;AAAA,EACL,MAAM;AACR,CAAC;AASM,IAAI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,MAAM;AACR;AACe,SAAR,MAAuB;AAC5B,KAAG;AAEH,MAAI;AAAA,IACF;AAAA,EACF,IAAI,cAAc;AAClB,MAAI;AAAA,IACF;AAAA,EACF,IAAI,eAAe;AAMnB,oBAAkB,MAAM;AACxB,SAAO,mDAAC,UAAK,MAAM,QAAQ,KAAK,KAAK,IAAI,GACrC;AAAA,uDAAC,UACC;AAAA,yDAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAJT;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,UAAK,WAAU,mBACd;AAAA,yDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SAJd;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAZG;AAAA;AAAA;AAAA;AAAA,SAaL;AACJ;AACA,GAAG,KAAK,gCAAgC,OAAO,WAAY;AACzD,SAAO,CAAC,eAAe,gBAAgB,iBAAiB;AAC1D,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,KAAK;AAEtB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
